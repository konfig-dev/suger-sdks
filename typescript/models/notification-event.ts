/* tslint:disable */
/* eslint-disable */
/**
 * Suger API
 * CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@suger.io
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */

// May contain unused imports in some cases
// @ts-ignore
import { EntityType } from './entity-type';
// May contain unused imports in some cases
// @ts-ignore
import { NotificationEventAction } from './notification-event-action';
// May contain unused imports in some cases
// @ts-ignore
import { NotificationEventStatus } from './notification-event-status';

/**
 * 
 * @export
 * @interface NotificationEvent
 */
export interface NotificationEvent {
    /**
     * 
     * @type {NotificationEventAction}
     * @memberof NotificationEvent
     */
    'action'?: NotificationEventAction;
    /**
     * 
     * @type {string}
     * @memberof NotificationEvent
     */
    'entityID'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationEvent
     */
    'entityStatus'?: string;
    /**
     * 
     * @type {EntityType}
     * @memberof NotificationEvent
     */
    'entityType'?: EntityType;
    /**
     * notification event id.
     * @type {string}
     * @memberof NotificationEvent
     */
    'eventID'?: string;
    /**
     * notification event status.
     * @type {NotificationEventStatus}
     * @memberof NotificationEvent
     */
    'eventStatus'?: NotificationEventStatus;
    /**
     * timestamp of the event when it is updated.
     * @type {string}
     * @memberof NotificationEvent
     */
    'lastUpdateTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationEvent
     */
    'message'?: string;
    /**
     * suger organization id.
     * @type {string}
     * @memberof NotificationEvent
     */
    'organizationID'?: string;
    /**
     * timestamp of the event when it is scheduled or created.
     * @type {string}
     * @memberof NotificationEvent
     */
    'timestamp'?: string;
}

