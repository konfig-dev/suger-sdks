/* tslint:disable */
/* eslint-disable */
/**
 * Suger API
 * CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@suger.io
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetRevenueReportParams } from '../models';
// @ts-ignore
import { ListRevenueRecordDetailsResponse } from '../models';
// @ts-ignore
import { ListRevenueRecordsResponse } from '../models';
// @ts-ignore
import { ListUsageMeteringDailyRecordsResponse } from '../models';
// @ts-ignore
import { ListUsageMeteringDailyVerificationsResponse } from '../models';
// @ts-ignore
import { RevenueReport } from '../models';
// @ts-ignore
import { RevenueReportType } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
import { ReportApiCustom } from "./report-api-custom";
/**
 * ReportApi - axios parameter creator
 * @export
 */
export const ReportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the revenue report of the given organization, product, entitlement, or buyer.
         * @summary get revenue report
         * @param {string} orgId Organization ID
         * @param {GetRevenueReportParams} getRevenueReportParams Get Revenue Report Params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRevenueReport: async (orgId: string, getRevenueReportParams: GetRevenueReportParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getRevenueReport', 'orgId', orgId)
            // verify required parameter 'getRevenueReportParams' is not null or undefined
            assertParamExists('getRevenueReport', 'getRevenueReportParams', getRevenueReportParams)
            const localVarPath = `/org/{orgId}/revenueReport`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: getRevenueReportParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(getRevenueReportParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * list the raw revenue record details for the given organization, product, entitlement, or buyer.
         * @summary list revenue record details
         * @param {string} orgId Organization ID
         * @param {'AWS' | 'AZURE' | 'GCP'} partner Cloud Partner
         * @param {string} [productId] Filter revenue record details by the given product ID
         * @param {string} [entitlementId] Filter revenue record details by the given entitlement ID
         * @param {string} [buyerId] Filter revenue record details by the given buyer ID
         * @param {string} [startDate] start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate
         * @param {string} [endDate] end date (UTC) in YYYY-MM-DD format, default is today
         * @param {number} [limit] List pagination size, default 20, max value is 1000
         * @param {number} [offset] List pagination offset, default 0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRevenueRecordDetails: async (orgId: string, partner: 'AWS' | 'AZURE' | 'GCP', productId?: string, entitlementId?: string, buyerId?: string, startDate?: string, endDate?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listRevenueRecordDetails', 'orgId', orgId)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('listRevenueRecordDetails', 'partner', partner)
            const localVarPath = `/org/{orgId}/partner/{partner}/revenueRecordDetail`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (entitlementId !== undefined) {
                localVarQueryParameter['entitlementId'] = entitlementId;
            }

            if (buyerId !== undefined) {
                localVarQueryParameter['buyerId'] = buyerId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * list the revenue records for the given organization, product, entitlement, or buyer.
         * @summary list revenue records
         * @param {string} orgId Organization ID
         * @param {'AWS' | 'AZURE' | 'GCP'} partner Cloud Partner
         * @param {string} [productId] Filter revenue record details by the given product ID
         * @param {string} [entitlementId] Filter revenue record details by the given entitlement ID
         * @param {string} [buyerId] Filter revenue record details by the given buyer ID
         * @param {string} [startDate] start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate
         * @param {string} [endDate] end date (UTC) in YYYY-MM-DD format, default is today
         * @param {number} [limit] List pagination size, default 20, max value is 1000
         * @param {number} [offset] List pagination offset, default 0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRevenueRecords: async (orgId: string, partner: 'AWS' | 'AZURE' | 'GCP', productId?: string, entitlementId?: string, buyerId?: string, startDate?: string, endDate?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listRevenueRecords', 'orgId', orgId)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('listRevenueRecords', 'partner', partner)
            const localVarPath = `/org/{orgId}/partner/{partner}/revenueRecord`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (entitlementId !== undefined) {
                localVarQueryParameter['entitlementId'] = entitlementId;
            }

            if (buyerId !== undefined) {
                localVarQueryParameter['buyerId'] = buyerId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * list the daily records of the usage metering from the cloud marketplace for the given organization, product, entitlement, or buyer.
         * @summary list usage metering daily records
         * @param {string} orgId Organization ID
         * @param {'AWS' | 'AZURE' | 'GCP'} partner Cloud Partner
         * @param {string} [productId] Filter revenue record details by the given product ID
         * @param {string} [entitlementId] Filter revenue record details by the given entitlement ID
         * @param {string} [buyerId] Filter revenue record details by the given buyer ID
         * @param {string} [startDate] start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate
         * @param {string} [endDate] end date (UTC) in YYYY-MM-DD format, default is today
         * @param {number} [limit] List pagination size, default 20, max value is 1000
         * @param {number} [offset] List pagination offset, default 0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsageMeteringDailyRecords: async (orgId: string, partner: 'AWS' | 'AZURE' | 'GCP', productId?: string, entitlementId?: string, buyerId?: string, startDate?: string, endDate?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listUsageMeteringDailyRecords', 'orgId', orgId)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('listUsageMeteringDailyRecords', 'partner', partner)
            const localVarPath = `/org/{orgId}/partner/{partner}/usageMeteringDailyRecord`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (entitlementId !== undefined) {
                localVarQueryParameter['entitlementId'] = entitlementId;
            }

            if (buyerId !== undefined) {
                localVarQueryParameter['buyerId'] = buyerId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * list the daily verifications between the usage records reported to cloud marketplace & the usage metering from the cloud marketplace for the given organization, product, entitlement, or buyer.
         * @summary list usage metering daily verifications
         * @param {string} orgId Organization ID
         * @param {'AWS' | 'AZURE' | 'GCP'} partner Cloud Partner
         * @param {string} [productId] Filter usage metering daily verifications by the given product ID
         * @param {string} [entitlementId] Filter usage metering daily verifications by the given entitlement ID
         * @param {string} [buyerId] Filter usage metering daily verifications by the given buyer ID
         * @param {string} [startDate] start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate
         * @param {string} [endDate] end date (UTC) in YYYY-MM-DD format, default is today
         * @param {number} [limit] List pagination size, default 20, max value is 1000
         * @param {number} [offset] List pagination offset, default 0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsageMeteringDailyVerifications: async (orgId: string, partner: 'AWS' | 'AZURE' | 'GCP', productId?: string, entitlementId?: string, buyerId?: string, startDate?: string, endDate?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listUsageMeteringDailyVerifications', 'orgId', orgId)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('listUsageMeteringDailyVerifications', 'partner', partner)
            const localVarPath = `/org/{orgId}/partner/{partner}/usageMeteringDailyVerification`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (entitlementId !== undefined) {
                localVarQueryParameter['entitlementId'] = entitlementId;
            }

            if (buyerId !== undefined) {
                localVarQueryParameter['buyerId'] = buyerId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportApi - functional programming interface
 * @export
 */
export const ReportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the revenue report of the given organization, product, entitlement, or buyer.
         * @summary get revenue report
         * @param {ReportApiGetRevenueReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRevenueReport(requestParameters: ReportApiGetRevenueReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RevenueReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRevenueReport(requestParameters.orgId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * list the raw revenue record details for the given organization, product, entitlement, or buyer.
         * @summary list revenue record details
         * @param {ReportApiListRevenueRecordDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRevenueRecordDetails(requestParameters: ReportApiListRevenueRecordDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListRevenueRecordDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRevenueRecordDetails(requestParameters.orgId, requestParameters.partner, requestParameters.productId, requestParameters.entitlementId, requestParameters.buyerId, requestParameters.startDate, requestParameters.endDate, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * list the revenue records for the given organization, product, entitlement, or buyer.
         * @summary list revenue records
         * @param {ReportApiListRevenueRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRevenueRecords(requestParameters: ReportApiListRevenueRecordsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListRevenueRecordsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRevenueRecords(requestParameters.orgId, requestParameters.partner, requestParameters.productId, requestParameters.entitlementId, requestParameters.buyerId, requestParameters.startDate, requestParameters.endDate, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * list the daily records of the usage metering from the cloud marketplace for the given organization, product, entitlement, or buyer.
         * @summary list usage metering daily records
         * @param {ReportApiListUsageMeteringDailyRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsageMeteringDailyRecords(requestParameters: ReportApiListUsageMeteringDailyRecordsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUsageMeteringDailyRecordsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsageMeteringDailyRecords(requestParameters.orgId, requestParameters.partner, requestParameters.productId, requestParameters.entitlementId, requestParameters.buyerId, requestParameters.startDate, requestParameters.endDate, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * list the daily verifications between the usage records reported to cloud marketplace & the usage metering from the cloud marketplace for the given organization, product, entitlement, or buyer.
         * @summary list usage metering daily verifications
         * @param {ReportApiListUsageMeteringDailyVerificationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsageMeteringDailyVerifications(requestParameters: ReportApiListUsageMeteringDailyVerificationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUsageMeteringDailyVerificationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsageMeteringDailyVerifications(requestParameters.orgId, requestParameters.partner, requestParameters.productId, requestParameters.entitlementId, requestParameters.buyerId, requestParameters.startDate, requestParameters.endDate, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportApi - factory interface
 * @export
 */
export const ReportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportApiFp(configuration)
    return {
        /**
         * Get the revenue report of the given organization, product, entitlement, or buyer.
         * @summary get revenue report
         * @param {ReportApiGetRevenueReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRevenueReport(requestParameters: ReportApiGetRevenueReportRequest, options?: AxiosRequestConfig): AxiosPromise<RevenueReport> {
            return localVarFp.getRevenueReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * list the raw revenue record details for the given organization, product, entitlement, or buyer.
         * @summary list revenue record details
         * @param {ReportApiListRevenueRecordDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRevenueRecordDetails(requestParameters: ReportApiListRevenueRecordDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<ListRevenueRecordDetailsResponse> {
            return localVarFp.listRevenueRecordDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * list the revenue records for the given organization, product, entitlement, or buyer.
         * @summary list revenue records
         * @param {ReportApiListRevenueRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRevenueRecords(requestParameters: ReportApiListRevenueRecordsRequest, options?: AxiosRequestConfig): AxiosPromise<ListRevenueRecordsResponse> {
            return localVarFp.listRevenueRecords(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * list the daily records of the usage metering from the cloud marketplace for the given organization, product, entitlement, or buyer.
         * @summary list usage metering daily records
         * @param {ReportApiListUsageMeteringDailyRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsageMeteringDailyRecords(requestParameters: ReportApiListUsageMeteringDailyRecordsRequest, options?: AxiosRequestConfig): AxiosPromise<ListUsageMeteringDailyRecordsResponse> {
            return localVarFp.listUsageMeteringDailyRecords(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * list the daily verifications between the usage records reported to cloud marketplace & the usage metering from the cloud marketplace for the given organization, product, entitlement, or buyer.
         * @summary list usage metering daily verifications
         * @param {ReportApiListUsageMeteringDailyVerificationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsageMeteringDailyVerifications(requestParameters: ReportApiListUsageMeteringDailyVerificationsRequest, options?: AxiosRequestConfig): AxiosPromise<ListUsageMeteringDailyVerificationsResponse> {
            return localVarFp.listUsageMeteringDailyVerifications(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getRevenueReport operation in ReportApi.
 * @export
 * @interface ReportApiGetRevenueReportRequest
 */
export type ReportApiGetRevenueReportRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof ReportApiGetRevenueReport
    */
    readonly orgId: string
    
} & GetRevenueReportParams

/**
 * Request parameters for listRevenueRecordDetails operation in ReportApi.
 * @export
 * @interface ReportApiListRevenueRecordDetailsRequest
 */
export type ReportApiListRevenueRecordDetailsRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof ReportApiListRevenueRecordDetails
    */
    readonly orgId: string
    
    /**
    * Cloud Partner
    * @type {'AWS' | 'AZURE' | 'GCP'}
    * @memberof ReportApiListRevenueRecordDetails
    */
    readonly partner: 'AWS' | 'AZURE' | 'GCP'
    
    /**
    * Filter revenue record details by the given product ID
    * @type {string}
    * @memberof ReportApiListRevenueRecordDetails
    */
    readonly productId?: string
    
    /**
    * Filter revenue record details by the given entitlement ID
    * @type {string}
    * @memberof ReportApiListRevenueRecordDetails
    */
    readonly entitlementId?: string
    
    /**
    * Filter revenue record details by the given buyer ID
    * @type {string}
    * @memberof ReportApiListRevenueRecordDetails
    */
    readonly buyerId?: string
    
    /**
    * start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate
    * @type {string}
    * @memberof ReportApiListRevenueRecordDetails
    */
    readonly startDate?: string
    
    /**
    * end date (UTC) in YYYY-MM-DD format, default is today
    * @type {string}
    * @memberof ReportApiListRevenueRecordDetails
    */
    readonly endDate?: string
    
    /**
    * List pagination size, default 20, max value is 1000
    * @type {number}
    * @memberof ReportApiListRevenueRecordDetails
    */
    readonly limit?: number
    
    /**
    * List pagination offset, default 0
    * @type {number}
    * @memberof ReportApiListRevenueRecordDetails
    */
    readonly offset?: number
    
}

/**
 * Request parameters for listRevenueRecords operation in ReportApi.
 * @export
 * @interface ReportApiListRevenueRecordsRequest
 */
export type ReportApiListRevenueRecordsRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof ReportApiListRevenueRecords
    */
    readonly orgId: string
    
    /**
    * Cloud Partner
    * @type {'AWS' | 'AZURE' | 'GCP'}
    * @memberof ReportApiListRevenueRecords
    */
    readonly partner: 'AWS' | 'AZURE' | 'GCP'
    
    /**
    * Filter revenue record details by the given product ID
    * @type {string}
    * @memberof ReportApiListRevenueRecords
    */
    readonly productId?: string
    
    /**
    * Filter revenue record details by the given entitlement ID
    * @type {string}
    * @memberof ReportApiListRevenueRecords
    */
    readonly entitlementId?: string
    
    /**
    * Filter revenue record details by the given buyer ID
    * @type {string}
    * @memberof ReportApiListRevenueRecords
    */
    readonly buyerId?: string
    
    /**
    * start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate
    * @type {string}
    * @memberof ReportApiListRevenueRecords
    */
    readonly startDate?: string
    
    /**
    * end date (UTC) in YYYY-MM-DD format, default is today
    * @type {string}
    * @memberof ReportApiListRevenueRecords
    */
    readonly endDate?: string
    
    /**
    * List pagination size, default 20, max value is 1000
    * @type {number}
    * @memberof ReportApiListRevenueRecords
    */
    readonly limit?: number
    
    /**
    * List pagination offset, default 0
    * @type {number}
    * @memberof ReportApiListRevenueRecords
    */
    readonly offset?: number
    
}

/**
 * Request parameters for listUsageMeteringDailyRecords operation in ReportApi.
 * @export
 * @interface ReportApiListUsageMeteringDailyRecordsRequest
 */
export type ReportApiListUsageMeteringDailyRecordsRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof ReportApiListUsageMeteringDailyRecords
    */
    readonly orgId: string
    
    /**
    * Cloud Partner
    * @type {'AWS' | 'AZURE' | 'GCP'}
    * @memberof ReportApiListUsageMeteringDailyRecords
    */
    readonly partner: 'AWS' | 'AZURE' | 'GCP'
    
    /**
    * Filter revenue record details by the given product ID
    * @type {string}
    * @memberof ReportApiListUsageMeteringDailyRecords
    */
    readonly productId?: string
    
    /**
    * Filter revenue record details by the given entitlement ID
    * @type {string}
    * @memberof ReportApiListUsageMeteringDailyRecords
    */
    readonly entitlementId?: string
    
    /**
    * Filter revenue record details by the given buyer ID
    * @type {string}
    * @memberof ReportApiListUsageMeteringDailyRecords
    */
    readonly buyerId?: string
    
    /**
    * start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate
    * @type {string}
    * @memberof ReportApiListUsageMeteringDailyRecords
    */
    readonly startDate?: string
    
    /**
    * end date (UTC) in YYYY-MM-DD format, default is today
    * @type {string}
    * @memberof ReportApiListUsageMeteringDailyRecords
    */
    readonly endDate?: string
    
    /**
    * List pagination size, default 20, max value is 1000
    * @type {number}
    * @memberof ReportApiListUsageMeteringDailyRecords
    */
    readonly limit?: number
    
    /**
    * List pagination offset, default 0
    * @type {number}
    * @memberof ReportApiListUsageMeteringDailyRecords
    */
    readonly offset?: number
    
}

/**
 * Request parameters for listUsageMeteringDailyVerifications operation in ReportApi.
 * @export
 * @interface ReportApiListUsageMeteringDailyVerificationsRequest
 */
export type ReportApiListUsageMeteringDailyVerificationsRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof ReportApiListUsageMeteringDailyVerifications
    */
    readonly orgId: string
    
    /**
    * Cloud Partner
    * @type {'AWS' | 'AZURE' | 'GCP'}
    * @memberof ReportApiListUsageMeteringDailyVerifications
    */
    readonly partner: 'AWS' | 'AZURE' | 'GCP'
    
    /**
    * Filter usage metering daily verifications by the given product ID
    * @type {string}
    * @memberof ReportApiListUsageMeteringDailyVerifications
    */
    readonly productId?: string
    
    /**
    * Filter usage metering daily verifications by the given entitlement ID
    * @type {string}
    * @memberof ReportApiListUsageMeteringDailyVerifications
    */
    readonly entitlementId?: string
    
    /**
    * Filter usage metering daily verifications by the given buyer ID
    * @type {string}
    * @memberof ReportApiListUsageMeteringDailyVerifications
    */
    readonly buyerId?: string
    
    /**
    * start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate
    * @type {string}
    * @memberof ReportApiListUsageMeteringDailyVerifications
    */
    readonly startDate?: string
    
    /**
    * end date (UTC) in YYYY-MM-DD format, default is today
    * @type {string}
    * @memberof ReportApiListUsageMeteringDailyVerifications
    */
    readonly endDate?: string
    
    /**
    * List pagination size, default 20, max value is 1000
    * @type {number}
    * @memberof ReportApiListUsageMeteringDailyVerifications
    */
    readonly limit?: number
    
    /**
    * List pagination offset, default 0
    * @type {number}
    * @memberof ReportApiListUsageMeteringDailyVerifications
    */
    readonly offset?: number
    
}

/**
 * ReportApi - object-oriented interface
 * @export
 * @class ReportApi
 * @extends {BaseAPI}
 */
export class ReportApi extends ReportApiCustom {
    /**
     * Get the revenue report of the given organization, product, entitlement, or buyer.
     * @summary get revenue report
     * @param {ReportApiGetRevenueReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public getRevenueReport(requestParameters: ReportApiGetRevenueReportRequest, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).getRevenueReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * list the raw revenue record details for the given organization, product, entitlement, or buyer.
     * @summary list revenue record details
     * @param {ReportApiListRevenueRecordDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public listRevenueRecordDetails(requestParameters: ReportApiListRevenueRecordDetailsRequest, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).listRevenueRecordDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * list the revenue records for the given organization, product, entitlement, or buyer.
     * @summary list revenue records
     * @param {ReportApiListRevenueRecordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public listRevenueRecords(requestParameters: ReportApiListRevenueRecordsRequest, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).listRevenueRecords(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * list the daily records of the usage metering from the cloud marketplace for the given organization, product, entitlement, or buyer.
     * @summary list usage metering daily records
     * @param {ReportApiListUsageMeteringDailyRecordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public listUsageMeteringDailyRecords(requestParameters: ReportApiListUsageMeteringDailyRecordsRequest, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).listUsageMeteringDailyRecords(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * list the daily verifications between the usage records reported to cloud marketplace & the usage metering from the cloud marketplace for the given organization, product, entitlement, or buyer.
     * @summary list usage metering daily verifications
     * @param {ReportApiListUsageMeteringDailyVerificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public listUsageMeteringDailyVerifications(requestParameters: ReportApiListUsageMeteringDailyVerificationsRequest, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).listUsageMeteringDailyVerifications(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
