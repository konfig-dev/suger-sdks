/* tslint:disable */
/* eslint-disable */
/**
 * Suger API
 * CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@suger.io
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { WorkloadEntitlementTerm } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
import { EntitlementTermApiCustom } from "./entitlement-term-api-custom";
/**
 * EntitlementTermApi - axios parameter creator
 * @export
 */
export const EntitlementTermApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the entitlement term by ID
         * @summary get entitlement term
         * @param {string} orgId Organization ID
         * @param {string} entitlementId Entitlement ID
         * @param {string} entitlementTermId Entitlement Term ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (orgId: string, entitlementId: string, entitlementTermId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('get', 'orgId', orgId)
            // verify required parameter 'entitlementId' is not null or undefined
            assertParamExists('get', 'entitlementId', entitlementId)
            // verify required parameter 'entitlementTermId' is not null or undefined
            assertParamExists('get', 'entitlementTermId', entitlementTermId)
            const localVarPath = `/org/{orgId}/entitlement/{entitlementId}/entitlementTerm/{entitlementTermId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"entitlementId"}}`, encodeURIComponent(String(entitlementId)))
                .replace(`{${"entitlementTermId"}}`, encodeURIComponent(String(entitlementTermId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all Entitlement Terms of the given Entitlement
         * @summary list entitlement terms
         * @param {string} orgId Organization ID
         * @param {string} entitlementId Entitlement ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (orgId: string, entitlementId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('list', 'orgId', orgId)
            // verify required parameter 'entitlementId' is not null or undefined
            assertParamExists('list', 'entitlementId', entitlementId)
            const localVarPath = `/org/{orgId}/entitlement/{entitlementId}/entitlementTerm`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"entitlementId"}}`, encodeURIComponent(String(entitlementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EntitlementTermApi - functional programming interface
 * @export
 */
export const EntitlementTermApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EntitlementTermApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the entitlement term by ID
         * @summary get entitlement term
         * @param {EntitlementTermApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: EntitlementTermApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkloadEntitlementTerm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.orgId, requestParameters.entitlementId, requestParameters.entitlementTermId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all Entitlement Terms of the given Entitlement
         * @summary list entitlement terms
         * @param {EntitlementTermApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: EntitlementTermApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkloadEntitlementTerm>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.orgId, requestParameters.entitlementId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EntitlementTermApi - factory interface
 * @export
 */
export const EntitlementTermApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EntitlementTermApiFp(configuration)
    return {
        /**
         * Get the entitlement term by ID
         * @summary get entitlement term
         * @param {EntitlementTermApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: EntitlementTermApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<WorkloadEntitlementTerm> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all Entitlement Terms of the given Entitlement
         * @summary list entitlement terms
         * @param {EntitlementTermApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: EntitlementTermApiListRequest, options?: AxiosRequestConfig): AxiosPromise<Array<WorkloadEntitlementTerm>> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for get operation in EntitlementTermApi.
 * @export
 * @interface EntitlementTermApiGetRequest
 */
export type EntitlementTermApiGetRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof EntitlementTermApiGet
    */
    readonly orgId: string
    
    /**
    * Entitlement ID
    * @type {string}
    * @memberof EntitlementTermApiGet
    */
    readonly entitlementId: string
    
    /**
    * Entitlement Term ID
    * @type {string}
    * @memberof EntitlementTermApiGet
    */
    readonly entitlementTermId: string
    
}

/**
 * Request parameters for list operation in EntitlementTermApi.
 * @export
 * @interface EntitlementTermApiListRequest
 */
export type EntitlementTermApiListRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof EntitlementTermApiList
    */
    readonly orgId: string
    
    /**
    * Entitlement ID
    * @type {string}
    * @memberof EntitlementTermApiList
    */
    readonly entitlementId: string
    
}

/**
 * EntitlementTermApi - object-oriented interface
 * @export
 * @class EntitlementTermApi
 * @extends {BaseAPI}
 */
export class EntitlementTermApi extends EntitlementTermApiCustom {
    /**
     * Get the entitlement term by ID
     * @summary get entitlement term
     * @param {EntitlementTermApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementTermApi
     */
    public get(requestParameters: EntitlementTermApiGetRequest, options?: AxiosRequestConfig) {
        return EntitlementTermApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all Entitlement Terms of the given Entitlement
     * @summary list entitlement terms
     * @param {EntitlementTermApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementTermApi
     */
    public list(requestParameters: EntitlementTermApiListRequest, options?: AxiosRequestConfig) {
        return EntitlementTermApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
