/* tslint:disable */
/* eslint-disable */
/**
 * Suger API
 * CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@suger.io
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddEntitlementCreditParams } from '../models';
// @ts-ignore
import { AddEntitlementCreditResponse } from '../models';
// @ts-ignore
import { Contact } from '../models';
// @ts-ignore
import { GithubComSugerioMarketplaceServiceRdsDbLibUpdateEntitlementNameParams } from '../models';
// @ts-ignore
import { NotificationEvent } from '../models';
// @ts-ignore
import { WorkloadEntitlement } from '../models';
// @ts-ignore
import { WorkloadMetaInfo } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
import { EntitlementApiCustom } from "./entitlement-api-custom";
/**
 * EntitlementApi - axios parameter creator
 * @export
 */
export const EntitlementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add the credit amount to the given Entitlement. The credit amount is accumulated & saved in the current Entitlement Term of the gvien Entitlement.
         * @summary add entitlement credit
         * @param {string} orgId Organization ID
         * @param {string} entitlementId Entitlement ID
         * @param {AddEntitlementCreditParams} addEntitlementCreditParams RequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCredit: async (orgId: string, entitlementId: string, addEntitlementCreditParams: AddEntitlementCreditParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('addCredit', 'orgId', orgId)
            // verify required parameter 'entitlementId' is not null or undefined
            assertParamExists('addCredit', 'entitlementId', entitlementId)
            // verify required parameter 'addEntitlementCreditParams' is not null or undefined
            assertParamExists('addCredit', 'addEntitlementCreditParams', addEntitlementCreditParams)
            const localVarPath = `/org/{orgId}/entitlement/{entitlementId}/addCredit`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"entitlementId"}}`, encodeURIComponent(String(entitlementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addEntitlementCreditParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addEntitlementCreditParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the entitlement by ID
         * @summary get entitlement
         * @param {string} orgId Organization ID
         * @param {string} entitlementId Entitlement ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (orgId: string, entitlementId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('get', 'orgId', orgId)
            // verify required parameter 'entitlementId' is not null or undefined
            assertParamExists('get', 'entitlementId', entitlementId)
            const localVarPath = `/org/{orgId}/entitlement/{entitlementId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"entitlementId"}}`, encodeURIComponent(String(entitlementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all entitlements under the organization
         * @summary list entitlements
         * @param {string} orgId Organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (orgId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('list', 'orgId', orgId)
            const localVarPath = `/org/{orgId}/entitlement`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all entitlements of the given buyer
         * @summary list entitlements by buyer
         * @param {string} orgId Organization ID
         * @param {string} buyerId Buyer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByBuyer: async (orgId: string, buyerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listByBuyer', 'orgId', orgId)
            // verify required parameter 'buyerId' is not null or undefined
            assertParamExists('listByBuyer', 'buyerId', buyerId)
            const localVarPath = `/org/{orgId}/buyer/{buyerId}/entitlement`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"buyerId"}}`, encodeURIComponent(String(buyerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all entitlements under the given offer
         * @summary list entitlements by offer
         * @param {string} orgId Organization ID
         * @param {string} offerId Offer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByOffer: async (orgId: string, offerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listByOffer', 'orgId', orgId)
            // verify required parameter 'offerId' is not null or undefined
            assertParamExists('listByOffer', 'offerId', offerId)
            const localVarPath = `/org/{orgId}/offer/{offerId}/entitlement`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"offerId"}}`, encodeURIComponent(String(offerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all entitlements under the given partner
         * @summary list entitlements by partner
         * @param {string} orgId Organization ID
         * @param {'AWS' | 'AZURE' | 'GCP'} partner Cloud Partner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByPartner: async (orgId: string, partner: 'AWS' | 'AZURE' | 'GCP', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listByPartner', 'orgId', orgId)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('listByPartner', 'partner', partner)
            const localVarPath = `/org/{orgId}/partner/{partner}/entitlement`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all entitlements under the given product
         * @summary list entitlements by product
         * @param {string} orgId Organization ID
         * @param {string} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByProduct: async (orgId: string, productId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listByProduct', 'orgId', orgId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('listByProduct', 'productId', productId)
            const localVarPath = `/org/{orgId}/product/{productId}/entitlement`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the meta info of the given entitlement.
         * @summary update entitlement meta info
         * @param {string} orgId Organization ID
         * @param {string} entitlementId Entitlement ID
         * @param {WorkloadMetaInfo} workloadMetaInfo Entitlement meta info to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMetaInfo: async (orgId: string, entitlementId: string, workloadMetaInfo: WorkloadMetaInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('updateMetaInfo', 'orgId', orgId)
            // verify required parameter 'entitlementId' is not null or undefined
            assertParamExists('updateMetaInfo', 'entitlementId', entitlementId)
            // verify required parameter 'workloadMetaInfo' is not null or undefined
            assertParamExists('updateMetaInfo', 'workloadMetaInfo', workloadMetaInfo)
            const localVarPath = `/org/{orgId}/entitlement/{entitlementId}/metaInfo`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"entitlementId"}}`, encodeURIComponent(String(entitlementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workloadMetaInfo,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workloadMetaInfo, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the name of the given Entitlement
         * @summary update entitlement name
         * @param {string} orgId Organization ID
         * @param {string} entitlementId Entitlement ID
         * @param {GithubComSugerioMarketplaceServiceRdsDbLibUpdateEntitlementNameParams} githubComSugerioMarketplaceServiceRdsDbLibUpdateEntitlementNameParams UpdateEntitlementNameParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateName: async (orgId: string, entitlementId: string, githubComSugerioMarketplaceServiceRdsDbLibUpdateEntitlementNameParams: GithubComSugerioMarketplaceServiceRdsDbLibUpdateEntitlementNameParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('updateName', 'orgId', orgId)
            // verify required parameter 'entitlementId' is not null or undefined
            assertParamExists('updateName', 'entitlementId', entitlementId)
            // verify required parameter 'githubComSugerioMarketplaceServiceRdsDbLibUpdateEntitlementNameParams' is not null or undefined
            assertParamExists('updateName', 'githubComSugerioMarketplaceServiceRdsDbLibUpdateEntitlementNameParams', githubComSugerioMarketplaceServiceRdsDbLibUpdateEntitlementNameParams)
            const localVarPath = `/org/{orgId}/entitlement/{entitlementId}/entitlementName`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"entitlementId"}}`, encodeURIComponent(String(entitlementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: githubComSugerioMarketplaceServiceRdsDbLibUpdateEntitlementNameParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(githubComSugerioMarketplaceServiceRdsDbLibUpdateEntitlementNameParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EntitlementApi - functional programming interface
 * @export
 */
export const EntitlementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EntitlementApiAxiosParamCreator(configuration)
    return {
        /**
         * Add the credit amount to the given Entitlement. The credit amount is accumulated & saved in the current Entitlement Term of the gvien Entitlement.
         * @summary add entitlement credit
         * @param {EntitlementApiAddCreditRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCredit(requestParameters: EntitlementApiAddCreditRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddEntitlementCreditResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCredit(requestParameters.orgId, requestParameters.entitlementId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the entitlement by ID
         * @summary get entitlement
         * @param {EntitlementApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: EntitlementApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkloadEntitlement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.orgId, requestParameters.entitlementId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all entitlements under the organization
         * @summary list entitlements
         * @param {EntitlementApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: EntitlementApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkloadEntitlement>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.orgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all entitlements of the given buyer
         * @summary list entitlements by buyer
         * @param {EntitlementApiListByBuyerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByBuyer(requestParameters: EntitlementApiListByBuyerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkloadEntitlement>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByBuyer(requestParameters.orgId, requestParameters.buyerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all entitlements under the given offer
         * @summary list entitlements by offer
         * @param {EntitlementApiListByOfferRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByOffer(requestParameters: EntitlementApiListByOfferRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkloadEntitlement>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByOffer(requestParameters.orgId, requestParameters.offerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all entitlements under the given partner
         * @summary list entitlements by partner
         * @param {EntitlementApiListByPartnerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByPartner(requestParameters: EntitlementApiListByPartnerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkloadEntitlement>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByPartner(requestParameters.orgId, requestParameters.partner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all entitlements under the given product
         * @summary list entitlements by product
         * @param {EntitlementApiListByProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByProduct(requestParameters: EntitlementApiListByProductRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkloadEntitlement>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByProduct(requestParameters.orgId, requestParameters.productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the meta info of the given entitlement.
         * @summary update entitlement meta info
         * @param {EntitlementApiUpdateMetaInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMetaInfo(requestParameters: EntitlementApiUpdateMetaInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkloadMetaInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMetaInfo(requestParameters.orgId, requestParameters.entitlementId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the name of the given Entitlement
         * @summary update entitlement name
         * @param {EntitlementApiUpdateNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateName(requestParameters: EntitlementApiUpdateNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkloadEntitlement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateName(requestParameters.orgId, requestParameters.entitlementId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EntitlementApi - factory interface
 * @export
 */
export const EntitlementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EntitlementApiFp(configuration)
    return {
        /**
         * Add the credit amount to the given Entitlement. The credit amount is accumulated & saved in the current Entitlement Term of the gvien Entitlement.
         * @summary add entitlement credit
         * @param {EntitlementApiAddCreditRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCredit(requestParameters: EntitlementApiAddCreditRequest, options?: AxiosRequestConfig): AxiosPromise<AddEntitlementCreditResponse> {
            return localVarFp.addCredit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the entitlement by ID
         * @summary get entitlement
         * @param {EntitlementApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: EntitlementApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<WorkloadEntitlement> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all entitlements under the organization
         * @summary list entitlements
         * @param {EntitlementApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: EntitlementApiListRequest, options?: AxiosRequestConfig): AxiosPromise<Array<WorkloadEntitlement>> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all entitlements of the given buyer
         * @summary list entitlements by buyer
         * @param {EntitlementApiListByBuyerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByBuyer(requestParameters: EntitlementApiListByBuyerRequest, options?: AxiosRequestConfig): AxiosPromise<Array<WorkloadEntitlement>> {
            return localVarFp.listByBuyer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all entitlements under the given offer
         * @summary list entitlements by offer
         * @param {EntitlementApiListByOfferRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByOffer(requestParameters: EntitlementApiListByOfferRequest, options?: AxiosRequestConfig): AxiosPromise<Array<WorkloadEntitlement>> {
            return localVarFp.listByOffer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all entitlements under the given partner
         * @summary list entitlements by partner
         * @param {EntitlementApiListByPartnerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByPartner(requestParameters: EntitlementApiListByPartnerRequest, options?: AxiosRequestConfig): AxiosPromise<Array<WorkloadEntitlement>> {
            return localVarFp.listByPartner(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all entitlements under the given product
         * @summary list entitlements by product
         * @param {EntitlementApiListByProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByProduct(requestParameters: EntitlementApiListByProductRequest, options?: AxiosRequestConfig): AxiosPromise<Array<WorkloadEntitlement>> {
            return localVarFp.listByProduct(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the meta info of the given entitlement.
         * @summary update entitlement meta info
         * @param {EntitlementApiUpdateMetaInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMetaInfo(requestParameters: EntitlementApiUpdateMetaInfoRequest, options?: AxiosRequestConfig): AxiosPromise<WorkloadMetaInfo> {
            return localVarFp.updateMetaInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the name of the given Entitlement
         * @summary update entitlement name
         * @param {EntitlementApiUpdateNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateName(requestParameters: EntitlementApiUpdateNameRequest, options?: AxiosRequestConfig): AxiosPromise<WorkloadEntitlement> {
            return localVarFp.updateName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addCredit operation in EntitlementApi.
 * @export
 * @interface EntitlementApiAddCreditRequest
 */
export type EntitlementApiAddCreditRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof EntitlementApiAddCredit
    */
    readonly orgId: string
    
    /**
    * Entitlement ID
    * @type {string}
    * @memberof EntitlementApiAddCredit
    */
    readonly entitlementId: string
    
} & AddEntitlementCreditParams

/**
 * Request parameters for get operation in EntitlementApi.
 * @export
 * @interface EntitlementApiGetRequest
 */
export type EntitlementApiGetRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof EntitlementApiGet
    */
    readonly orgId: string
    
    /**
    * Entitlement ID
    * @type {string}
    * @memberof EntitlementApiGet
    */
    readonly entitlementId: string
    
}

/**
 * Request parameters for list operation in EntitlementApi.
 * @export
 * @interface EntitlementApiListRequest
 */
export type EntitlementApiListRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof EntitlementApiList
    */
    readonly orgId: string
    
}

/**
 * Request parameters for listByBuyer operation in EntitlementApi.
 * @export
 * @interface EntitlementApiListByBuyerRequest
 */
export type EntitlementApiListByBuyerRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof EntitlementApiListByBuyer
    */
    readonly orgId: string
    
    /**
    * Buyer ID
    * @type {string}
    * @memberof EntitlementApiListByBuyer
    */
    readonly buyerId: string
    
}

/**
 * Request parameters for listByOffer operation in EntitlementApi.
 * @export
 * @interface EntitlementApiListByOfferRequest
 */
export type EntitlementApiListByOfferRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof EntitlementApiListByOffer
    */
    readonly orgId: string
    
    /**
    * Offer ID
    * @type {string}
    * @memberof EntitlementApiListByOffer
    */
    readonly offerId: string
    
}

/**
 * Request parameters for listByPartner operation in EntitlementApi.
 * @export
 * @interface EntitlementApiListByPartnerRequest
 */
export type EntitlementApiListByPartnerRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof EntitlementApiListByPartner
    */
    readonly orgId: string
    
    /**
    * Cloud Partner
    * @type {'AWS' | 'AZURE' | 'GCP'}
    * @memberof EntitlementApiListByPartner
    */
    readonly partner: 'AWS' | 'AZURE' | 'GCP'
    
}

/**
 * Request parameters for listByProduct operation in EntitlementApi.
 * @export
 * @interface EntitlementApiListByProductRequest
 */
export type EntitlementApiListByProductRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof EntitlementApiListByProduct
    */
    readonly orgId: string
    
    /**
    * Product ID
    * @type {string}
    * @memberof EntitlementApiListByProduct
    */
    readonly productId: string
    
}

/**
 * Request parameters for updateMetaInfo operation in EntitlementApi.
 * @export
 * @interface EntitlementApiUpdateMetaInfoRequest
 */
export type EntitlementApiUpdateMetaInfoRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof EntitlementApiUpdateMetaInfo
    */
    readonly orgId: string
    
    /**
    * Entitlement ID
    * @type {string}
    * @memberof EntitlementApiUpdateMetaInfo
    */
    readonly entitlementId: string
    
} & WorkloadMetaInfo

/**
 * Request parameters for updateName operation in EntitlementApi.
 * @export
 * @interface EntitlementApiUpdateNameRequest
 */
export type EntitlementApiUpdateNameRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof EntitlementApiUpdateName
    */
    readonly orgId: string
    
    /**
    * Entitlement ID
    * @type {string}
    * @memberof EntitlementApiUpdateName
    */
    readonly entitlementId: string
    
} & GithubComSugerioMarketplaceServiceRdsDbLibUpdateEntitlementNameParams

/**
 * EntitlementApi - object-oriented interface
 * @export
 * @class EntitlementApi
 * @extends {BaseAPI}
 */
export class EntitlementApi extends EntitlementApiCustom {
    /**
     * Add the credit amount to the given Entitlement. The credit amount is accumulated & saved in the current Entitlement Term of the gvien Entitlement.
     * @summary add entitlement credit
     * @param {EntitlementApiAddCreditRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementApi
     */
    public addCredit(requestParameters: EntitlementApiAddCreditRequest, options?: AxiosRequestConfig) {
        return EntitlementApiFp(this.configuration).addCredit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the entitlement by ID
     * @summary get entitlement
     * @param {EntitlementApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementApi
     */
    public get(requestParameters: EntitlementApiGetRequest, options?: AxiosRequestConfig) {
        return EntitlementApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all entitlements under the organization
     * @summary list entitlements
     * @param {EntitlementApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementApi
     */
    public list(requestParameters: EntitlementApiListRequest, options?: AxiosRequestConfig) {
        return EntitlementApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all entitlements of the given buyer
     * @summary list entitlements by buyer
     * @param {EntitlementApiListByBuyerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementApi
     */
    public listByBuyer(requestParameters: EntitlementApiListByBuyerRequest, options?: AxiosRequestConfig) {
        return EntitlementApiFp(this.configuration).listByBuyer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all entitlements under the given offer
     * @summary list entitlements by offer
     * @param {EntitlementApiListByOfferRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementApi
     */
    public listByOffer(requestParameters: EntitlementApiListByOfferRequest, options?: AxiosRequestConfig) {
        return EntitlementApiFp(this.configuration).listByOffer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all entitlements under the given partner
     * @summary list entitlements by partner
     * @param {EntitlementApiListByPartnerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementApi
     */
    public listByPartner(requestParameters: EntitlementApiListByPartnerRequest, options?: AxiosRequestConfig) {
        return EntitlementApiFp(this.configuration).listByPartner(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all entitlements under the given product
     * @summary list entitlements by product
     * @param {EntitlementApiListByProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementApi
     */
    public listByProduct(requestParameters: EntitlementApiListByProductRequest, options?: AxiosRequestConfig) {
        return EntitlementApiFp(this.configuration).listByProduct(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the meta info of the given entitlement.
     * @summary update entitlement meta info
     * @param {EntitlementApiUpdateMetaInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementApi
     */
    public updateMetaInfo(requestParameters: EntitlementApiUpdateMetaInfoRequest, options?: AxiosRequestConfig) {
        return EntitlementApiFp(this.configuration).updateMetaInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the name of the given Entitlement
     * @summary update entitlement name
     * @param {EntitlementApiUpdateNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementApi
     */
    public updateName(requestParameters: EntitlementApiUpdateNameRequest, options?: AxiosRequestConfig) {
        return EntitlementApiFp(this.configuration).updateName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
