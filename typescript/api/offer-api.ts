/* tslint:disable */
/* eslint-disable */
/**
 * Suger API
 * CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@suger.io
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Contact } from '../models';
// @ts-ignore
import { NotificationEvent } from '../models';
// @ts-ignore
import { OfferInfo } from '../models';
// @ts-ignore
import { WorkloadMetaInfo } from '../models';
// @ts-ignore
import { WorkloadOffer } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
import { OfferApiCustom } from "./offer-api-custom";
/**
 * OfferApi - axios parameter creator
 * @export
 */
export const OfferApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Only the offer with status = \"PENDING_ACCEPTANCE\" or \"PENDING_CANCEL\" is allowed to cancel.
         * @summary cancel offer
         * @param {string} orgId Organization ID
         * @param {string} offerId Offer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancel: async (orgId: string, offerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('cancel', 'orgId', orgId)
            // verify required parameter 'offerId' is not null or undefined
            assertParamExists('cancel', 'offerId', offerId)
            const localVarPath = `/org/{orgId}/offer/{offerId}/cancel`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"offerId"}}`, encodeURIComponent(String(offerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a private offer under the given organization.
         * @summary create offer
         * @param {string} orgId Organization ID
         * @param {WorkloadOffer} workloadOffer Offer to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (orgId: string, workloadOffer: WorkloadOffer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('create', 'orgId', orgId)
            // verify required parameter 'workloadOffer' is not null or undefined
            assertParamExists('create', 'workloadOffer', workloadOffer)
            const localVarPath = `/org/{orgId}/offer`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workloadOffer,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workloadOffer, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Only the offer with status = \"DRAFT\" or \"CREATE_FAILED\" is allowed to be deleted.
         * @summary delete offer
         * @param {string} orgId Organization ID
         * @param {string} offerId Offer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete: async (orgId: string, offerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('delete', 'orgId', orgId)
            // verify required parameter 'offerId' is not null or undefined
            assertParamExists('delete', 'offerId', offerId)
            const localVarPath = `/org/{orgId}/offer/{offerId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"offerId"}}`, encodeURIComponent(String(offerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new draft offer or update the existing draft offer. When updating draft offer, the offer.ID is required.
         * @summary create or update draft offer
         * @param {string} orgId Organization ID
         * @param {WorkloadOffer} workloadOffer the draft offer to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        draft: async (orgId: string, workloadOffer: WorkloadOffer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('draft', 'orgId', orgId)
            // verify required parameter 'workloadOffer' is not null or undefined
            assertParamExists('draft', 'workloadOffer', workloadOffer)
            const localVarPath = `/org/{orgId}/draftOffer`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workloadOffer,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workloadOffer, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the offer by the given offer ID.
         * @summary get offer
         * @param {string} orgId Organization ID
         * @param {string} offerId Offer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (orgId: string, offerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('get', 'orgId', orgId)
            // verify required parameter 'offerId' is not null or undefined
            assertParamExists('get', 'offerId', offerId)
            const localVarPath = `/org/{orgId}/offer/{offerId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"offerId"}}`, encodeURIComponent(String(offerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the EULA file of the given offer ID.
         * @summary get offer EULA
         * @param {string} orgId Organization ID
         * @param {string} offerId Offer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEula: async (orgId: string, offerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getEula', 'orgId', orgId)
            // verify required parameter 'offerId' is not null or undefined
            assertParamExists('getEula', 'offerId', offerId)
            const localVarPath = `/org/{orgId}/offer/{offerId}/eula`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"offerId"}}`, encodeURIComponent(String(offerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all offers under the given organization.
         * @summary list offers by organization
         * @param {string} orgId Organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByOrganization: async (orgId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listByOrganization', 'orgId', orgId)
            const localVarPath = `/org/{orgId}/offer`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all offers under the given organization & cloud partner.
         * @summary list offers by partner
         * @param {string} orgId Organization ID
         * @param {'AWS' | 'AZURE' | 'GCP'} partner Cloud Partner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByPartner: async (orgId: string, partner: 'AWS' | 'AZURE' | 'GCP', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listByPartner', 'orgId', orgId)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('listByPartner', 'partner', partner)
            const localVarPath = `/org/{orgId}/partner/{partner}/offer`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all offers under the given organization & product.
         * @summary list offers by product
         * @param {string} orgId Organization ID
         * @param {string} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByProduct: async (orgId: string, productId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listByProduct', 'orgId', orgId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('listByProduct', 'productId', productId)
            const localVarPath = `/org/{orgId}/product/{productId}/offer`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the meta info of the given offer.
         * @summary update offer meta info
         * @param {string} orgId Organization ID
         * @param {string} offerId Offer ID
         * @param {WorkloadMetaInfo} workloadMetaInfo Offer meta info to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMetaInfo: async (orgId: string, offerId: string, workloadMetaInfo: WorkloadMetaInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('updateMetaInfo', 'orgId', orgId)
            // verify required parameter 'offerId' is not null or undefined
            assertParamExists('updateMetaInfo', 'offerId', offerId)
            // verify required parameter 'workloadMetaInfo' is not null or undefined
            assertParamExists('updateMetaInfo', 'workloadMetaInfo', workloadMetaInfo)
            const localVarPath = `/org/{orgId}/offer/{offerId}/metaInfo`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"offerId"}}`, encodeURIComponent(String(offerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workloadMetaInfo,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workloadMetaInfo, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OfferApi - functional programming interface
 * @export
 */
export const OfferApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OfferApiAxiosParamCreator(configuration)
    return {
        /**
         * Only the offer with status = \"PENDING_ACCEPTANCE\" or \"PENDING_CANCEL\" is allowed to cancel.
         * @summary cancel offer
         * @param {OfferApiCancelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancel(requestParameters: OfferApiCancelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancel(requestParameters.orgId, requestParameters.offerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a private offer under the given organization.
         * @summary create offer
         * @param {OfferApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(requestParameters: OfferApiCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkloadOffer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(requestParameters.orgId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Only the offer with status = \"DRAFT\" or \"CREATE_FAILED\" is allowed to be deleted.
         * @summary delete offer
         * @param {OfferApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete(requestParameters: OfferApiDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete(requestParameters.orgId, requestParameters.offerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new draft offer or update the existing draft offer. When updating draft offer, the offer.ID is required.
         * @summary create or update draft offer
         * @param {OfferApiDraftRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async draft(requestParameters: OfferApiDraftRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkloadOffer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.draft(requestParameters.orgId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the offer by the given offer ID.
         * @summary get offer
         * @param {OfferApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: OfferApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkloadOffer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.orgId, requestParameters.offerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the EULA file of the given offer ID.
         * @summary get offer EULA
         * @param {OfferApiGetEulaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEula(requestParameters: OfferApiGetEulaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEula(requestParameters.orgId, requestParameters.offerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all offers under the given organization.
         * @summary list offers by organization
         * @param {OfferApiListByOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByOrganization(requestParameters: OfferApiListByOrganizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkloadOffer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByOrganization(requestParameters.orgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all offers under the given organization & cloud partner.
         * @summary list offers by partner
         * @param {OfferApiListByPartnerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByPartner(requestParameters: OfferApiListByPartnerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkloadOffer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByPartner(requestParameters.orgId, requestParameters.partner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all offers under the given organization & product.
         * @summary list offers by product
         * @param {OfferApiListByProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByProduct(requestParameters: OfferApiListByProductRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkloadOffer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByProduct(requestParameters.orgId, requestParameters.productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the meta info of the given offer.
         * @summary update offer meta info
         * @param {OfferApiUpdateMetaInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMetaInfo(requestParameters: OfferApiUpdateMetaInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkloadMetaInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMetaInfo(requestParameters.orgId, requestParameters.offerId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OfferApi - factory interface
 * @export
 */
export const OfferApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OfferApiFp(configuration)
    return {
        /**
         * Only the offer with status = \"PENDING_ACCEPTANCE\" or \"PENDING_CANCEL\" is allowed to cancel.
         * @summary cancel offer
         * @param {OfferApiCancelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancel(requestParameters: OfferApiCancelRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.cancel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a private offer under the given organization.
         * @summary create offer
         * @param {OfferApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: OfferApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<WorkloadOffer> {
            return localVarFp.create(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Only the offer with status = \"DRAFT\" or \"CREATE_FAILED\" is allowed to be deleted.
         * @summary delete offer
         * @param {OfferApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete(requestParameters: OfferApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.delete(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new draft offer or update the existing draft offer. When updating draft offer, the offer.ID is required.
         * @summary create or update draft offer
         * @param {OfferApiDraftRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        draft(requestParameters: OfferApiDraftRequest, options?: AxiosRequestConfig): AxiosPromise<WorkloadOffer> {
            return localVarFp.draft(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the offer by the given offer ID.
         * @summary get offer
         * @param {OfferApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: OfferApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<WorkloadOffer> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the EULA file of the given offer ID.
         * @summary get offer EULA
         * @param {OfferApiGetEulaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEula(requestParameters: OfferApiGetEulaRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getEula(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all offers under the given organization.
         * @summary list offers by organization
         * @param {OfferApiListByOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByOrganization(requestParameters: OfferApiListByOrganizationRequest, options?: AxiosRequestConfig): AxiosPromise<Array<WorkloadOffer>> {
            return localVarFp.listByOrganization(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all offers under the given organization & cloud partner.
         * @summary list offers by partner
         * @param {OfferApiListByPartnerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByPartner(requestParameters: OfferApiListByPartnerRequest, options?: AxiosRequestConfig): AxiosPromise<Array<WorkloadOffer>> {
            return localVarFp.listByPartner(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all offers under the given organization & product.
         * @summary list offers by product
         * @param {OfferApiListByProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByProduct(requestParameters: OfferApiListByProductRequest, options?: AxiosRequestConfig): AxiosPromise<Array<WorkloadOffer>> {
            return localVarFp.listByProduct(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the meta info of the given offer.
         * @summary update offer meta info
         * @param {OfferApiUpdateMetaInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMetaInfo(requestParameters: OfferApiUpdateMetaInfoRequest, options?: AxiosRequestConfig): AxiosPromise<WorkloadMetaInfo> {
            return localVarFp.updateMetaInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancel operation in OfferApi.
 * @export
 * @interface OfferApiCancelRequest
 */
export type OfferApiCancelRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof OfferApiCancel
    */
    readonly orgId: string
    
    /**
    * Offer ID
    * @type {string}
    * @memberof OfferApiCancel
    */
    readonly offerId: string
    
}

/**
 * Request parameters for create operation in OfferApi.
 * @export
 * @interface OfferApiCreateRequest
 */
export type OfferApiCreateRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof OfferApiCreate
    */
    readonly orgId: string
    
} & WorkloadOffer

/**
 * Request parameters for delete operation in OfferApi.
 * @export
 * @interface OfferApiDeleteRequest
 */
export type OfferApiDeleteRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof OfferApiDelete
    */
    readonly orgId: string
    
    /**
    * Offer ID
    * @type {string}
    * @memberof OfferApiDelete
    */
    readonly offerId: string
    
}

/**
 * Request parameters for draft operation in OfferApi.
 * @export
 * @interface OfferApiDraftRequest
 */
export type OfferApiDraftRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof OfferApiDraft
    */
    readonly orgId: string
    
} & WorkloadOffer

/**
 * Request parameters for get operation in OfferApi.
 * @export
 * @interface OfferApiGetRequest
 */
export type OfferApiGetRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof OfferApiGet
    */
    readonly orgId: string
    
    /**
    * Offer ID
    * @type {string}
    * @memberof OfferApiGet
    */
    readonly offerId: string
    
}

/**
 * Request parameters for getEula operation in OfferApi.
 * @export
 * @interface OfferApiGetEulaRequest
 */
export type OfferApiGetEulaRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof OfferApiGetEula
    */
    readonly orgId: string
    
    /**
    * Offer ID
    * @type {string}
    * @memberof OfferApiGetEula
    */
    readonly offerId: string
    
}

/**
 * Request parameters for listByOrganization operation in OfferApi.
 * @export
 * @interface OfferApiListByOrganizationRequest
 */
export type OfferApiListByOrganizationRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof OfferApiListByOrganization
    */
    readonly orgId: string
    
}

/**
 * Request parameters for listByPartner operation in OfferApi.
 * @export
 * @interface OfferApiListByPartnerRequest
 */
export type OfferApiListByPartnerRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof OfferApiListByPartner
    */
    readonly orgId: string
    
    /**
    * Cloud Partner
    * @type {'AWS' | 'AZURE' | 'GCP'}
    * @memberof OfferApiListByPartner
    */
    readonly partner: 'AWS' | 'AZURE' | 'GCP'
    
}

/**
 * Request parameters for listByProduct operation in OfferApi.
 * @export
 * @interface OfferApiListByProductRequest
 */
export type OfferApiListByProductRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof OfferApiListByProduct
    */
    readonly orgId: string
    
    /**
    * Product ID
    * @type {string}
    * @memberof OfferApiListByProduct
    */
    readonly productId: string
    
}

/**
 * Request parameters for updateMetaInfo operation in OfferApi.
 * @export
 * @interface OfferApiUpdateMetaInfoRequest
 */
export type OfferApiUpdateMetaInfoRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof OfferApiUpdateMetaInfo
    */
    readonly orgId: string
    
    /**
    * Offer ID
    * @type {string}
    * @memberof OfferApiUpdateMetaInfo
    */
    readonly offerId: string
    
} & WorkloadMetaInfo

/**
 * OfferApi - object-oriented interface
 * @export
 * @class OfferApi
 * @extends {BaseAPI}
 */
export class OfferApi extends OfferApiCustom {
    /**
     * Only the offer with status = \"PENDING_ACCEPTANCE\" or \"PENDING_CANCEL\" is allowed to cancel.
     * @summary cancel offer
     * @param {OfferApiCancelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public cancel(requestParameters: OfferApiCancelRequest, options?: AxiosRequestConfig) {
        return OfferApiFp(this.configuration).cancel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a private offer under the given organization.
     * @summary create offer
     * @param {OfferApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public create(requestParameters: OfferApiCreateRequest, options?: AxiosRequestConfig) {
        return OfferApiFp(this.configuration).create(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Only the offer with status = \"DRAFT\" or \"CREATE_FAILED\" is allowed to be deleted.
     * @summary delete offer
     * @param {OfferApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public delete(requestParameters: OfferApiDeleteRequest, options?: AxiosRequestConfig) {
        return OfferApiFp(this.configuration).delete(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new draft offer or update the existing draft offer. When updating draft offer, the offer.ID is required.
     * @summary create or update draft offer
     * @param {OfferApiDraftRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public draft(requestParameters: OfferApiDraftRequest, options?: AxiosRequestConfig) {
        return OfferApiFp(this.configuration).draft(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the offer by the given offer ID.
     * @summary get offer
     * @param {OfferApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public get(requestParameters: OfferApiGetRequest, options?: AxiosRequestConfig) {
        return OfferApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the EULA file of the given offer ID.
     * @summary get offer EULA
     * @param {OfferApiGetEulaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public getEula(requestParameters: OfferApiGetEulaRequest, options?: AxiosRequestConfig) {
        return OfferApiFp(this.configuration).getEula(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all offers under the given organization.
     * @summary list offers by organization
     * @param {OfferApiListByOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public listByOrganization(requestParameters: OfferApiListByOrganizationRequest, options?: AxiosRequestConfig) {
        return OfferApiFp(this.configuration).listByOrganization(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all offers under the given organization & cloud partner.
     * @summary list offers by partner
     * @param {OfferApiListByPartnerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public listByPartner(requestParameters: OfferApiListByPartnerRequest, options?: AxiosRequestConfig) {
        return OfferApiFp(this.configuration).listByPartner(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all offers under the given organization & product.
     * @summary list offers by product
     * @param {OfferApiListByProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public listByProduct(requestParameters: OfferApiListByProductRequest, options?: AxiosRequestConfig) {
        return OfferApiFp(this.configuration).listByProduct(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the meta info of the given offer.
     * @summary update offer meta info
     * @param {OfferApiUpdateMetaInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public updateMetaInfo(requestParameters: OfferApiUpdateMetaInfoRequest, options?: AxiosRequestConfig) {
        return OfferApiFp(this.configuration).updateMetaInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
