/* tslint:disable */
/* eslint-disable */
/**
 * Suger API
 * CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@suger.io
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GithubComSugerioMarketplaceServiceRdsDbLibUpdateBuyerNameDescriptionParams } from '../models';
// @ts-ignore
import { IdentityBuyer } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
import { BuyerApiCustom } from "./buyer-api-custom";
/**
 * BuyerApi - axios parameter creator
 * @export
 */
export const BuyerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * get buyer by the given organization and buyer id
         * @summary get buyer
         * @param {string} orgId Organization ID
         * @param {string} buyerId Buyer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (orgId: string, buyerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('get', 'orgId', orgId)
            // verify required parameter 'buyerId' is not null or undefined
            assertParamExists('get', 'buyerId', buyerId)
            const localVarPath = `/org/{orgId}/buyer/{buyerId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"buyerId"}}`, encodeURIComponent(String(buyerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * list all buyers by the given organization
         * @summary list buyers by organization
         * @param {string} orgId Organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByOrganization: async (orgId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listByOrganization', 'orgId', orgId)
            const localVarPath = `/org/{orgId}/buyer`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * list all buyers by the given organization and partner
         * @summary list buyers by partner
         * @param {string} orgId Organization ID
         * @param {'AWS' | 'AZURE' | 'GCP'} partner Cloud Partner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByPartner: async (orgId: string, partner: 'AWS' | 'AZURE' | 'GCP', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listByPartner', 'orgId', orgId)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('listByPartner', 'partner', partner)
            const localVarPath = `/org/{orgId}/partner/{partner}/buyer`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update buyer name and description by the given organization and buyer id
         * @summary update buyer name and description
         * @param {string} orgId Organization ID
         * @param {string} buyerId Buyer ID
         * @param {GithubComSugerioMarketplaceServiceRdsDbLibUpdateBuyerNameDescriptionParams} githubComSugerioMarketplaceServiceRdsDbLibUpdateBuyerNameDescriptionParams UpdateBuyerNameDescriptionParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (orgId: string, buyerId: string, githubComSugerioMarketplaceServiceRdsDbLibUpdateBuyerNameDescriptionParams: GithubComSugerioMarketplaceServiceRdsDbLibUpdateBuyerNameDescriptionParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('update', 'orgId', orgId)
            // verify required parameter 'buyerId' is not null or undefined
            assertParamExists('update', 'buyerId', buyerId)
            // verify required parameter 'githubComSugerioMarketplaceServiceRdsDbLibUpdateBuyerNameDescriptionParams' is not null or undefined
            assertParamExists('update', 'githubComSugerioMarketplaceServiceRdsDbLibUpdateBuyerNameDescriptionParams', githubComSugerioMarketplaceServiceRdsDbLibUpdateBuyerNameDescriptionParams)
            const localVarPath = `/org/{orgId}/buyer/{buyerId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"buyerId"}}`, encodeURIComponent(String(buyerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: githubComSugerioMarketplaceServiceRdsDbLibUpdateBuyerNameDescriptionParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(githubComSugerioMarketplaceServiceRdsDbLibUpdateBuyerNameDescriptionParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BuyerApi - functional programming interface
 * @export
 */
export const BuyerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BuyerApiAxiosParamCreator(configuration)
    return {
        /**
         * get buyer by the given organization and buyer id
         * @summary get buyer
         * @param {BuyerApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: BuyerApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityBuyer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.orgId, requestParameters.buyerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * list all buyers by the given organization
         * @summary list buyers by organization
         * @param {BuyerApiListByOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByOrganization(requestParameters: BuyerApiListByOrganizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdentityBuyer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByOrganization(requestParameters.orgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * list all buyers by the given organization and partner
         * @summary list buyers by partner
         * @param {BuyerApiListByPartnerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByPartner(requestParameters: BuyerApiListByPartnerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdentityBuyer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByPartner(requestParameters.orgId, requestParameters.partner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update buyer name and description by the given organization and buyer id
         * @summary update buyer name and description
         * @param {BuyerApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(requestParameters: BuyerApiUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityBuyer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(requestParameters.orgId, requestParameters.buyerId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BuyerApi - factory interface
 * @export
 */
export const BuyerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BuyerApiFp(configuration)
    return {
        /**
         * get buyer by the given organization and buyer id
         * @summary get buyer
         * @param {BuyerApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: BuyerApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<IdentityBuyer> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * list all buyers by the given organization
         * @summary list buyers by organization
         * @param {BuyerApiListByOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByOrganization(requestParameters: BuyerApiListByOrganizationRequest, options?: AxiosRequestConfig): AxiosPromise<Array<IdentityBuyer>> {
            return localVarFp.listByOrganization(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * list all buyers by the given organization and partner
         * @summary list buyers by partner
         * @param {BuyerApiListByPartnerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByPartner(requestParameters: BuyerApiListByPartnerRequest, options?: AxiosRequestConfig): AxiosPromise<Array<IdentityBuyer>> {
            return localVarFp.listByPartner(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * update buyer name and description by the given organization and buyer id
         * @summary update buyer name and description
         * @param {BuyerApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: BuyerApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<IdentityBuyer> {
            return localVarFp.update(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for get operation in BuyerApi.
 * @export
 * @interface BuyerApiGetRequest
 */
export type BuyerApiGetRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof BuyerApiGet
    */
    readonly orgId: string
    
    /**
    * Buyer ID
    * @type {string}
    * @memberof BuyerApiGet
    */
    readonly buyerId: string
    
}

/**
 * Request parameters for listByOrganization operation in BuyerApi.
 * @export
 * @interface BuyerApiListByOrganizationRequest
 */
export type BuyerApiListByOrganizationRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof BuyerApiListByOrganization
    */
    readonly orgId: string
    
}

/**
 * Request parameters for listByPartner operation in BuyerApi.
 * @export
 * @interface BuyerApiListByPartnerRequest
 */
export type BuyerApiListByPartnerRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof BuyerApiListByPartner
    */
    readonly orgId: string
    
    /**
    * Cloud Partner
    * @type {'AWS' | 'AZURE' | 'GCP'}
    * @memberof BuyerApiListByPartner
    */
    readonly partner: 'AWS' | 'AZURE' | 'GCP'
    
}

/**
 * Request parameters for update operation in BuyerApi.
 * @export
 * @interface BuyerApiUpdateRequest
 */
export type BuyerApiUpdateRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof BuyerApiUpdate
    */
    readonly orgId: string
    
    /**
    * Buyer ID
    * @type {string}
    * @memberof BuyerApiUpdate
    */
    readonly buyerId: string
    
} & GithubComSugerioMarketplaceServiceRdsDbLibUpdateBuyerNameDescriptionParams

/**
 * BuyerApi - object-oriented interface
 * @export
 * @class BuyerApi
 * @extends {BaseAPI}
 */
export class BuyerApi extends BuyerApiCustom {
    /**
     * get buyer by the given organization and buyer id
     * @summary get buyer
     * @param {BuyerApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuyerApi
     */
    public get(requestParameters: BuyerApiGetRequest, options?: AxiosRequestConfig) {
        return BuyerApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * list all buyers by the given organization
     * @summary list buyers by organization
     * @param {BuyerApiListByOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuyerApi
     */
    public listByOrganization(requestParameters: BuyerApiListByOrganizationRequest, options?: AxiosRequestConfig) {
        return BuyerApiFp(this.configuration).listByOrganization(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * list all buyers by the given organization and partner
     * @summary list buyers by partner
     * @param {BuyerApiListByPartnerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuyerApi
     */
    public listByPartner(requestParameters: BuyerApiListByPartnerRequest, options?: AxiosRequestConfig) {
        return BuyerApiFp(this.configuration).listByPartner(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update buyer name and description by the given organization and buyer id
     * @summary update buyer name and description
     * @param {BuyerApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuyerApi
     */
    public update(requestParameters: BuyerApiUpdateRequest, options?: AxiosRequestConfig) {
        return BuyerApiFp(this.configuration).update(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
