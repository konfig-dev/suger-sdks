/* tslint:disable */
/* eslint-disable */
/**
 * Suger API
 * CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@suger.io
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AwsSaasProductDimension } from '../models';
// @ts-ignore
import { UpdateProductParams } from '../models';
// @ts-ignore
import { WorkloadProduct } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
import { ProductApiCustom } from "./product-api-custom";
/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * only the product with status = \"CREATE_FAILED\" is allowed to be deleted.
         * @summary delete product
         * @param {string} orgId Organization ID
         * @param {string} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete: async (orgId: string, productId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('delete', 'orgId', orgId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('delete', 'productId', productId)
            const localVarPath = `/org/{orgId}/product/{productId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get product by product id
         * @summary get product
         * @param {string} orgId Organization ID
         * @param {string} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (orgId: string, productId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('get', 'orgId', orgId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('get', 'productId', productId)
            const localVarPath = `/org/{orgId}/product/{productId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * list all products under the given organization
         * @summary list products by organization
         * @param {string} orgId Organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByOrganization: async (orgId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listByOrganization', 'orgId', orgId)
            const localVarPath = `/org/{orgId}/product`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * list all products under the given organization and cloud partner
         * @summary list products by partner
         * @param {string} orgId Organization ID
         * @param {'AWS' | 'AZURE' | 'GCP'} partner Cloud Partner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByPartner: async (orgId: string, partner: 'AWS' | 'AZURE' | 'GCP', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listByPartner', 'orgId', orgId)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('listByPartner', 'partner', partner)
            const localVarPath = `/org/{orgId}/partner/{partner}/product`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * list all metering dimensions of the given product
         * @summary list metering dimensions of product
         * @param {string} orgId Organization ID
         * @param {string} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMeteringDimensions: async (orgId: string, productId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listMeteringDimensions', 'orgId', orgId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('listMeteringDimensions', 'productId', productId)
            const localVarPath = `/org/{orgId}/product/{productId}/dimension`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * currently only the Fulfillment URL is allowed to update via this API.
         * @summary update product
         * @param {string} orgId Organization ID
         * @param {string} productId Product ID
         * @param {UpdateProductParams} updateProductParams Update Product Params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (orgId: string, productId: string, updateProductParams: UpdateProductParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('update', 'orgId', orgId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('update', 'productId', productId)
            // verify required parameter 'updateProductParams' is not null or undefined
            assertParamExists('update', 'updateProductParams', updateProductParams)
            const localVarPath = `/org/{orgId}/product/{productId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateProductParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateProductParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * only the product with status = \"CREATE_FAILED\" is allowed to be deleted.
         * @summary delete product
         * @param {ProductApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete(requestParameters: ProductApiDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete(requestParameters.orgId, requestParameters.productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get product by product id
         * @summary get product
         * @param {ProductApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: ProductApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkloadProduct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.orgId, requestParameters.productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * list all products under the given organization
         * @summary list products by organization
         * @param {ProductApiListByOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByOrganization(requestParameters: ProductApiListByOrganizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkloadProduct>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByOrganization(requestParameters.orgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * list all products under the given organization and cloud partner
         * @summary list products by partner
         * @param {ProductApiListByPartnerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByPartner(requestParameters: ProductApiListByPartnerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkloadProduct>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByPartner(requestParameters.orgId, requestParameters.partner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * list all metering dimensions of the given product
         * @summary list metering dimensions of product
         * @param {ProductApiListMeteringDimensionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMeteringDimensions(requestParameters: ProductApiListMeteringDimensionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AwsSaasProductDimension>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMeteringDimensions(requestParameters.orgId, requestParameters.productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * currently only the Fulfillment URL is allowed to update via this API.
         * @summary update product
         * @param {ProductApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(requestParameters: ProductApiUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkloadProduct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(requestParameters.orgId, requestParameters.productId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * only the product with status = \"CREATE_FAILED\" is allowed to be deleted.
         * @summary delete product
         * @param {ProductApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete(requestParameters: ProductApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.delete(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * get product by product id
         * @summary get product
         * @param {ProductApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: ProductApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<WorkloadProduct> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * list all products under the given organization
         * @summary list products by organization
         * @param {ProductApiListByOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByOrganization(requestParameters: ProductApiListByOrganizationRequest, options?: AxiosRequestConfig): AxiosPromise<Array<WorkloadProduct>> {
            return localVarFp.listByOrganization(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * list all products under the given organization and cloud partner
         * @summary list products by partner
         * @param {ProductApiListByPartnerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByPartner(requestParameters: ProductApiListByPartnerRequest, options?: AxiosRequestConfig): AxiosPromise<Array<WorkloadProduct>> {
            return localVarFp.listByPartner(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * list all metering dimensions of the given product
         * @summary list metering dimensions of product
         * @param {ProductApiListMeteringDimensionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMeteringDimensions(requestParameters: ProductApiListMeteringDimensionsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<AwsSaasProductDimension>> {
            return localVarFp.listMeteringDimensions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * currently only the Fulfillment URL is allowed to update via this API.
         * @summary update product
         * @param {ProductApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: ProductApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<WorkloadProduct> {
            return localVarFp.update(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for delete operation in ProductApi.
 * @export
 * @interface ProductApiDeleteRequest
 */
export type ProductApiDeleteRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof ProductApiDelete
    */
    readonly orgId: string
    
    /**
    * Product ID
    * @type {string}
    * @memberof ProductApiDelete
    */
    readonly productId: string
    
}

/**
 * Request parameters for get operation in ProductApi.
 * @export
 * @interface ProductApiGetRequest
 */
export type ProductApiGetRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof ProductApiGet
    */
    readonly orgId: string
    
    /**
    * Product ID
    * @type {string}
    * @memberof ProductApiGet
    */
    readonly productId: string
    
}

/**
 * Request parameters for listByOrganization operation in ProductApi.
 * @export
 * @interface ProductApiListByOrganizationRequest
 */
export type ProductApiListByOrganizationRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof ProductApiListByOrganization
    */
    readonly orgId: string
    
}

/**
 * Request parameters for listByPartner operation in ProductApi.
 * @export
 * @interface ProductApiListByPartnerRequest
 */
export type ProductApiListByPartnerRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof ProductApiListByPartner
    */
    readonly orgId: string
    
    /**
    * Cloud Partner
    * @type {'AWS' | 'AZURE' | 'GCP'}
    * @memberof ProductApiListByPartner
    */
    readonly partner: 'AWS' | 'AZURE' | 'GCP'
    
}

/**
 * Request parameters for listMeteringDimensions operation in ProductApi.
 * @export
 * @interface ProductApiListMeteringDimensionsRequest
 */
export type ProductApiListMeteringDimensionsRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof ProductApiListMeteringDimensions
    */
    readonly orgId: string
    
    /**
    * Product ID
    * @type {string}
    * @memberof ProductApiListMeteringDimensions
    */
    readonly productId: string
    
}

/**
 * Request parameters for update operation in ProductApi.
 * @export
 * @interface ProductApiUpdateRequest
 */
export type ProductApiUpdateRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof ProductApiUpdate
    */
    readonly orgId: string
    
    /**
    * Product ID
    * @type {string}
    * @memberof ProductApiUpdate
    */
    readonly productId: string
    
} & UpdateProductParams

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends ProductApiCustom {
    /**
     * only the product with status = \"CREATE_FAILED\" is allowed to be deleted.
     * @summary delete product
     * @param {ProductApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public delete(requestParameters: ProductApiDeleteRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).delete(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get product by product id
     * @summary get product
     * @param {ProductApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public get(requestParameters: ProductApiGetRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * list all products under the given organization
     * @summary list products by organization
     * @param {ProductApiListByOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public listByOrganization(requestParameters: ProductApiListByOrganizationRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).listByOrganization(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * list all products under the given organization and cloud partner
     * @summary list products by partner
     * @param {ProductApiListByPartnerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public listByPartner(requestParameters: ProductApiListByPartnerRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).listByPartner(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * list all metering dimensions of the given product
     * @summary list metering dimensions of product
     * @param {ProductApiListMeteringDimensionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public listMeteringDimensions(requestParameters: ProductApiListMeteringDimensionsRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).listMeteringDimensions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * currently only the Fulfillment URL is allowed to update via this API.
     * @summary update product
     * @param {ProductApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public update(requestParameters: ProductApiUpdateRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).update(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
