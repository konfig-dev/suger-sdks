/* tslint:disable */
/* eslint-disable */
/**
 * Suger API
 * CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@suger.io
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateUsageRecordGroupParams } from '../models';
// @ts-ignore
import { CreateUsageRecordGroupParamsMetaInfo } from '../models';
// @ts-ignore
import { ListUsageRecordGroupsResponse } from '../models';
// @ts-ignore
import { ListUsageRecordReportsResponse } from '../models';
// @ts-ignore
import { MeteringUsageRecordGroup } from '../models';
// @ts-ignore
import { MeteringUsageRecordReport } from '../models';
// @ts-ignore
import { PartnerUsageMeteringConfig } from '../models';
// @ts-ignore
import { UsageMeteringConfigInfo } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
import { MeteringApiCustom } from "./metering-api-custom";
/**
 * MeteringApi - axios parameter creator
 * @export
 */
export const MeteringApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * delete the UsageRecordGroup for the given organization and usageRecordGroup ID. Only usageRecordGroup with status \"CREATED\" or \"INVALID\" can be deleted.
         * @summary delete usageRecordGroup
         * @param {string} orgId Organization ID
         * @param {string} usageRecordGroupId UsageRecordGroup ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsageRecordGroups: async (orgId: string, usageRecordGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('deleteUsageRecordGroups', 'orgId', orgId)
            // verify required parameter 'usageRecordGroupId' is not null or undefined
            assertParamExists('deleteUsageRecordGroups', 'usageRecordGroupId', usageRecordGroupId)
            const localVarPath = `/org/{orgId}/usageRecordGroup/{usageRecordGroupId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"usageRecordGroupId"}}`, encodeURIComponent(String(usageRecordGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the usage metering config info of the given organization.
         * @summary get usage metering config info
         * @param {string} orgId Organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsageConfigInfo: async (orgId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getUsageConfigInfo', 'orgId', orgId)
            const localVarPath = `/org/{orgId}/usageMeteringConfigInfo`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get UsageRecordGroup for the given organization and usageRecordGroup ID
         * @summary get usageRecordGroup
         * @param {string} orgId Organization ID
         * @param {string} usageRecordGroupId UsageRecordGroup ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsageRecordGroups: async (orgId: string, usageRecordGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getUsageRecordGroups', 'orgId', orgId)
            // verify required parameter 'usageRecordGroupId' is not null or undefined
            assertParamExists('getUsageRecordGroups', 'usageRecordGroupId', usageRecordGroupId)
            const localVarPath = `/org/{orgId}/usageRecordGroup/{usageRecordGroupId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"usageRecordGroupId"}}`, encodeURIComponent(String(usageRecordGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get the usageRecordReport for a given organization and usageRecordReport ID.
         * @summary get usageRecordReport
         * @param {string} orgId Organization ID
         * @param {string} usageRecordReportId UsageRecordReport ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsageRecordReport: async (orgId: string, usageRecordReportId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getUsageRecordReport', 'orgId', orgId)
            // verify required parameter 'usageRecordReportId' is not null or undefined
            assertParamExists('getUsageRecordReport', 'usageRecordReportId', usageRecordReportId)
            const localVarPath = `/org/{orgId}/usageRecordReport/{usageRecordReportId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"usageRecordReportId"}}`, encodeURIComponent(String(usageRecordReportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List UsageRecordGroups by the given organization, partner, product, entitlement or buyer. Only provide one or none of the optional query parameters: partner, productId, entitlementId & buyerId .
         * @summary list usageRecordGroups
         * @param {string} orgId Organization ID
         * @param {'AWS' | 'AZURE' | 'GCP'} [partner] Cloud Partner
         * @param {string} [productId] product ID
         * @param {string} [entitlementId] entitlement ID
         * @param {string} [buyerId] buyer ID
         * @param {string} [startDate] start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate
         * @param {string} [endDate] end date (UTC) in YYYY-MM-DD format, default is today
         * @param {number} [limit] List pagination size, default 20, max value is 1000
         * @param {number} [offset] List pagination offset, default 0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsageRecordGroups: async (orgId: string, partner?: 'AWS' | 'AZURE' | 'GCP', productId?: string, entitlementId?: string, buyerId?: string, startDate?: string, endDate?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listUsageRecordGroups', 'orgId', orgId)
            const localVarPath = `/org/{orgId}/usageRecordGroup`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            if (partner !== undefined) {
                localVarQueryParameter['partner'] = partner;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (entitlementId !== undefined) {
                localVarQueryParameter['entitlementId'] = entitlementId;
            }

            if (buyerId !== undefined) {
                localVarQueryParameter['buyerId'] = buyerId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List usageRecordReports under the given organization, partner, product, entitlement or buyer. Only provide one or none of the following parameters: partner, product, entitlement or buyer.
         * @summary list usageRecordReports
         * @param {string} orgId Organization ID
         * @param {'AWS' | 'AZURE' | 'GCP'} [partner] Cloud Partner
         * @param {string} [productId] product ID
         * @param {string} [entitlementId] entitlement ID
         * @param {string} [buyerId] buyer ID
         * @param {string} [startDate] start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate
         * @param {string} [endDate] end date (UTC) in YYYY-MM-DD format, default is today
         * @param {number} [limit] List pagination size, default 20, max value is 1000
         * @param {number} [offset] List pagination offset, default 0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsageRecordReports: async (orgId: string, partner?: 'AWS' | 'AZURE' | 'GCP', productId?: string, entitlementId?: string, buyerId?: string, startDate?: string, endDate?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listUsageRecordReports', 'orgId', orgId)
            const localVarPath = `/org/{orgId}/usageRecordReport`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            if (partner !== undefined) {
                localVarQueryParameter['partner'] = partner;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (entitlementId !== undefined) {
                localVarQueryParameter['entitlementId'] = entitlementId;
            }

            if (buyerId !== undefined) {
                localVarQueryParameter['buyerId'] = buyerId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * It is recommended to provide the ID in the request body CreateUsageRecordGroupParams, so the report can be deduplicated. All duplicate report will return error code 409.
         * @summary report usageRecordGroup
         * @param {string} orgId Organization ID
         * @param {string} entitlementId Entitlement ID
         * @param {CreateUsageRecordGroupParams} createUsageRecordGroupParams RequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportUsageRecordGroup: async (orgId: string, entitlementId: string, createUsageRecordGroupParams: CreateUsageRecordGroupParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('reportUsageRecordGroup', 'orgId', orgId)
            // verify required parameter 'entitlementId' is not null or undefined
            assertParamExists('reportUsageRecordGroup', 'entitlementId', entitlementId)
            // verify required parameter 'createUsageRecordGroupParams' is not null or undefined
            assertParamExists('reportUsageRecordGroup', 'createUsageRecordGroupParams', createUsageRecordGroupParams)
            const localVarPath = `/org/{orgId}/entitlement/{entitlementId}/usageRecordGroup`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"entitlementId"}}`, encodeURIComponent(String(entitlementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createUsageRecordGroupParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createUsageRecordGroupParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the usage metering config info of the given organization.
         * @summary update usage metering config info
         * @param {string} orgId Organization ID
         * @param {UsageMeteringConfigInfo} usageMeteringConfigInfo The usage metering config info to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsageConfigInfo: async (orgId: string, usageMeteringConfigInfo: UsageMeteringConfigInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('updateUsageConfigInfo', 'orgId', orgId)
            // verify required parameter 'usageMeteringConfigInfo' is not null or undefined
            assertParamExists('updateUsageConfigInfo', 'usageMeteringConfigInfo', usageMeteringConfigInfo)
            const localVarPath = `/org/{orgId}/usageMeteringConfigInfo`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usageMeteringConfigInfo,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usageMeteringConfigInfo, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeteringApi - functional programming interface
 * @export
 */
export const MeteringApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeteringApiAxiosParamCreator(configuration)
    return {
        /**
         * delete the UsageRecordGroup for the given organization and usageRecordGroup ID. Only usageRecordGroup with status \"CREATED\" or \"INVALID\" can be deleted.
         * @summary delete usageRecordGroup
         * @param {MeteringApiDeleteUsageRecordGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsageRecordGroups(requestParameters: MeteringApiDeleteUsageRecordGroupsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeteringUsageRecordGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsageRecordGroups(requestParameters.orgId, requestParameters.usageRecordGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the usage metering config info of the given organization.
         * @summary get usage metering config info
         * @param {MeteringApiGetUsageConfigInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsageConfigInfo(requestParameters: MeteringApiGetUsageConfigInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsageMeteringConfigInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsageConfigInfo(requestParameters.orgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get UsageRecordGroup for the given organization and usageRecordGroup ID
         * @summary get usageRecordGroup
         * @param {MeteringApiGetUsageRecordGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsageRecordGroups(requestParameters: MeteringApiGetUsageRecordGroupsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeteringUsageRecordGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsageRecordGroups(requestParameters.orgId, requestParameters.usageRecordGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get the usageRecordReport for a given organization and usageRecordReport ID.
         * @summary get usageRecordReport
         * @param {MeteringApiGetUsageRecordReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsageRecordReport(requestParameters: MeteringApiGetUsageRecordReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeteringUsageRecordReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsageRecordReport(requestParameters.orgId, requestParameters.usageRecordReportId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List UsageRecordGroups by the given organization, partner, product, entitlement or buyer. Only provide one or none of the optional query parameters: partner, productId, entitlementId & buyerId .
         * @summary list usageRecordGroups
         * @param {MeteringApiListUsageRecordGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsageRecordGroups(requestParameters: MeteringApiListUsageRecordGroupsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUsageRecordGroupsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsageRecordGroups(requestParameters.orgId, requestParameters.partner, requestParameters.productId, requestParameters.entitlementId, requestParameters.buyerId, requestParameters.startDate, requestParameters.endDate, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List usageRecordReports under the given organization, partner, product, entitlement or buyer. Only provide one or none of the following parameters: partner, product, entitlement or buyer.
         * @summary list usageRecordReports
         * @param {MeteringApiListUsageRecordReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsageRecordReports(requestParameters: MeteringApiListUsageRecordReportsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUsageRecordReportsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsageRecordReports(requestParameters.orgId, requestParameters.partner, requestParameters.productId, requestParameters.entitlementId, requestParameters.buyerId, requestParameters.startDate, requestParameters.endDate, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * It is recommended to provide the ID in the request body CreateUsageRecordGroupParams, so the report can be deduplicated. All duplicate report will return error code 409.
         * @summary report usageRecordGroup
         * @param {MeteringApiReportUsageRecordGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportUsageRecordGroup(requestParameters: MeteringApiReportUsageRecordGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeteringUsageRecordGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportUsageRecordGroup(requestParameters.orgId, requestParameters.entitlementId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the usage metering config info of the given organization.
         * @summary update usage metering config info
         * @param {MeteringApiUpdateUsageConfigInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsageConfigInfo(requestParameters: MeteringApiUpdateUsageConfigInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsageMeteringConfigInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsageConfigInfo(requestParameters.orgId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MeteringApi - factory interface
 * @export
 */
export const MeteringApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeteringApiFp(configuration)
    return {
        /**
         * delete the UsageRecordGroup for the given organization and usageRecordGroup ID. Only usageRecordGroup with status \"CREATED\" or \"INVALID\" can be deleted.
         * @summary delete usageRecordGroup
         * @param {MeteringApiDeleteUsageRecordGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsageRecordGroups(requestParameters: MeteringApiDeleteUsageRecordGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<MeteringUsageRecordGroup> {
            return localVarFp.deleteUsageRecordGroups(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the usage metering config info of the given organization.
         * @summary get usage metering config info
         * @param {MeteringApiGetUsageConfigInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsageConfigInfo(requestParameters: MeteringApiGetUsageConfigInfoRequest, options?: AxiosRequestConfig): AxiosPromise<UsageMeteringConfigInfo> {
            return localVarFp.getUsageConfigInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * get UsageRecordGroup for the given organization and usageRecordGroup ID
         * @summary get usageRecordGroup
         * @param {MeteringApiGetUsageRecordGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsageRecordGroups(requestParameters: MeteringApiGetUsageRecordGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<MeteringUsageRecordGroup> {
            return localVarFp.getUsageRecordGroups(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * get the usageRecordReport for a given organization and usageRecordReport ID.
         * @summary get usageRecordReport
         * @param {MeteringApiGetUsageRecordReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsageRecordReport(requestParameters: MeteringApiGetUsageRecordReportRequest, options?: AxiosRequestConfig): AxiosPromise<MeteringUsageRecordReport> {
            return localVarFp.getUsageRecordReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List UsageRecordGroups by the given organization, partner, product, entitlement or buyer. Only provide one or none of the optional query parameters: partner, productId, entitlementId & buyerId .
         * @summary list usageRecordGroups
         * @param {MeteringApiListUsageRecordGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsageRecordGroups(requestParameters: MeteringApiListUsageRecordGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<ListUsageRecordGroupsResponse> {
            return localVarFp.listUsageRecordGroups(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List usageRecordReports under the given organization, partner, product, entitlement or buyer. Only provide one or none of the following parameters: partner, product, entitlement or buyer.
         * @summary list usageRecordReports
         * @param {MeteringApiListUsageRecordReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsageRecordReports(requestParameters: MeteringApiListUsageRecordReportsRequest, options?: AxiosRequestConfig): AxiosPromise<ListUsageRecordReportsResponse> {
            return localVarFp.listUsageRecordReports(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * It is recommended to provide the ID in the request body CreateUsageRecordGroupParams, so the report can be deduplicated. All duplicate report will return error code 409.
         * @summary report usageRecordGroup
         * @param {MeteringApiReportUsageRecordGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportUsageRecordGroup(requestParameters: MeteringApiReportUsageRecordGroupRequest, options?: AxiosRequestConfig): AxiosPromise<MeteringUsageRecordGroup> {
            return localVarFp.reportUsageRecordGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the usage metering config info of the given organization.
         * @summary update usage metering config info
         * @param {MeteringApiUpdateUsageConfigInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsageConfigInfo(requestParameters: MeteringApiUpdateUsageConfigInfoRequest, options?: AxiosRequestConfig): AxiosPromise<UsageMeteringConfigInfo> {
            return localVarFp.updateUsageConfigInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteUsageRecordGroups operation in MeteringApi.
 * @export
 * @interface MeteringApiDeleteUsageRecordGroupsRequest
 */
export type MeteringApiDeleteUsageRecordGroupsRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof MeteringApiDeleteUsageRecordGroups
    */
    readonly orgId: string
    
    /**
    * UsageRecordGroup ID
    * @type {string}
    * @memberof MeteringApiDeleteUsageRecordGroups
    */
    readonly usageRecordGroupId: string
    
}

/**
 * Request parameters for getUsageConfigInfo operation in MeteringApi.
 * @export
 * @interface MeteringApiGetUsageConfigInfoRequest
 */
export type MeteringApiGetUsageConfigInfoRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof MeteringApiGetUsageConfigInfo
    */
    readonly orgId: string
    
}

/**
 * Request parameters for getUsageRecordGroups operation in MeteringApi.
 * @export
 * @interface MeteringApiGetUsageRecordGroupsRequest
 */
export type MeteringApiGetUsageRecordGroupsRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof MeteringApiGetUsageRecordGroups
    */
    readonly orgId: string
    
    /**
    * UsageRecordGroup ID
    * @type {string}
    * @memberof MeteringApiGetUsageRecordGroups
    */
    readonly usageRecordGroupId: string
    
}

/**
 * Request parameters for getUsageRecordReport operation in MeteringApi.
 * @export
 * @interface MeteringApiGetUsageRecordReportRequest
 */
export type MeteringApiGetUsageRecordReportRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof MeteringApiGetUsageRecordReport
    */
    readonly orgId: string
    
    /**
    * UsageRecordReport ID
    * @type {string}
    * @memberof MeteringApiGetUsageRecordReport
    */
    readonly usageRecordReportId: string
    
}

/**
 * Request parameters for listUsageRecordGroups operation in MeteringApi.
 * @export
 * @interface MeteringApiListUsageRecordGroupsRequest
 */
export type MeteringApiListUsageRecordGroupsRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof MeteringApiListUsageRecordGroups
    */
    readonly orgId: string
    
    /**
    * Cloud Partner
    * @type {'AWS' | 'AZURE' | 'GCP'}
    * @memberof MeteringApiListUsageRecordGroups
    */
    readonly partner?: 'AWS' | 'AZURE' | 'GCP'
    
    /**
    * product ID
    * @type {string}
    * @memberof MeteringApiListUsageRecordGroups
    */
    readonly productId?: string
    
    /**
    * entitlement ID
    * @type {string}
    * @memberof MeteringApiListUsageRecordGroups
    */
    readonly entitlementId?: string
    
    /**
    * buyer ID
    * @type {string}
    * @memberof MeteringApiListUsageRecordGroups
    */
    readonly buyerId?: string
    
    /**
    * start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate
    * @type {string}
    * @memberof MeteringApiListUsageRecordGroups
    */
    readonly startDate?: string
    
    /**
    * end date (UTC) in YYYY-MM-DD format, default is today
    * @type {string}
    * @memberof MeteringApiListUsageRecordGroups
    */
    readonly endDate?: string
    
    /**
    * List pagination size, default 20, max value is 1000
    * @type {number}
    * @memberof MeteringApiListUsageRecordGroups
    */
    readonly limit?: number
    
    /**
    * List pagination offset, default 0
    * @type {number}
    * @memberof MeteringApiListUsageRecordGroups
    */
    readonly offset?: number
    
}

/**
 * Request parameters for listUsageRecordReports operation in MeteringApi.
 * @export
 * @interface MeteringApiListUsageRecordReportsRequest
 */
export type MeteringApiListUsageRecordReportsRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof MeteringApiListUsageRecordReports
    */
    readonly orgId: string
    
    /**
    * Cloud Partner
    * @type {'AWS' | 'AZURE' | 'GCP'}
    * @memberof MeteringApiListUsageRecordReports
    */
    readonly partner?: 'AWS' | 'AZURE' | 'GCP'
    
    /**
    * product ID
    * @type {string}
    * @memberof MeteringApiListUsageRecordReports
    */
    readonly productId?: string
    
    /**
    * entitlement ID
    * @type {string}
    * @memberof MeteringApiListUsageRecordReports
    */
    readonly entitlementId?: string
    
    /**
    * buyer ID
    * @type {string}
    * @memberof MeteringApiListUsageRecordReports
    */
    readonly buyerId?: string
    
    /**
    * start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate
    * @type {string}
    * @memberof MeteringApiListUsageRecordReports
    */
    readonly startDate?: string
    
    /**
    * end date (UTC) in YYYY-MM-DD format, default is today
    * @type {string}
    * @memberof MeteringApiListUsageRecordReports
    */
    readonly endDate?: string
    
    /**
    * List pagination size, default 20, max value is 1000
    * @type {number}
    * @memberof MeteringApiListUsageRecordReports
    */
    readonly limit?: number
    
    /**
    * List pagination offset, default 0
    * @type {number}
    * @memberof MeteringApiListUsageRecordReports
    */
    readonly offset?: number
    
}

/**
 * Request parameters for reportUsageRecordGroup operation in MeteringApi.
 * @export
 * @interface MeteringApiReportUsageRecordGroupRequest
 */
export type MeteringApiReportUsageRecordGroupRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof MeteringApiReportUsageRecordGroup
    */
    readonly orgId: string
    
    /**
    * Entitlement ID
    * @type {string}
    * @memberof MeteringApiReportUsageRecordGroup
    */
    readonly entitlementId: string
    
} & CreateUsageRecordGroupParams

/**
 * Request parameters for updateUsageConfigInfo operation in MeteringApi.
 * @export
 * @interface MeteringApiUpdateUsageConfigInfoRequest
 */
export type MeteringApiUpdateUsageConfigInfoRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof MeteringApiUpdateUsageConfigInfo
    */
    readonly orgId: string
    
} & UsageMeteringConfigInfo

/**
 * MeteringApi - object-oriented interface
 * @export
 * @class MeteringApi
 * @extends {BaseAPI}
 */
export class MeteringApi extends MeteringApiCustom {
    /**
     * delete the UsageRecordGroup for the given organization and usageRecordGroup ID. Only usageRecordGroup with status \"CREATED\" or \"INVALID\" can be deleted.
     * @summary delete usageRecordGroup
     * @param {MeteringApiDeleteUsageRecordGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    public deleteUsageRecordGroups(requestParameters: MeteringApiDeleteUsageRecordGroupsRequest, options?: AxiosRequestConfig) {
        return MeteringApiFp(this.configuration).deleteUsageRecordGroups(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the usage metering config info of the given organization.
     * @summary get usage metering config info
     * @param {MeteringApiGetUsageConfigInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    public getUsageConfigInfo(requestParameters: MeteringApiGetUsageConfigInfoRequest, options?: AxiosRequestConfig) {
        return MeteringApiFp(this.configuration).getUsageConfigInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get UsageRecordGroup for the given organization and usageRecordGroup ID
     * @summary get usageRecordGroup
     * @param {MeteringApiGetUsageRecordGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    public getUsageRecordGroups(requestParameters: MeteringApiGetUsageRecordGroupsRequest, options?: AxiosRequestConfig) {
        return MeteringApiFp(this.configuration).getUsageRecordGroups(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get the usageRecordReport for a given organization and usageRecordReport ID.
     * @summary get usageRecordReport
     * @param {MeteringApiGetUsageRecordReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    public getUsageRecordReport(requestParameters: MeteringApiGetUsageRecordReportRequest, options?: AxiosRequestConfig) {
        return MeteringApiFp(this.configuration).getUsageRecordReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List UsageRecordGroups by the given organization, partner, product, entitlement or buyer. Only provide one or none of the optional query parameters: partner, productId, entitlementId & buyerId .
     * @summary list usageRecordGroups
     * @param {MeteringApiListUsageRecordGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    public listUsageRecordGroups(requestParameters: MeteringApiListUsageRecordGroupsRequest, options?: AxiosRequestConfig) {
        return MeteringApiFp(this.configuration).listUsageRecordGroups(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List usageRecordReports under the given organization, partner, product, entitlement or buyer. Only provide one or none of the following parameters: partner, product, entitlement or buyer.
     * @summary list usageRecordReports
     * @param {MeteringApiListUsageRecordReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    public listUsageRecordReports(requestParameters: MeteringApiListUsageRecordReportsRequest, options?: AxiosRequestConfig) {
        return MeteringApiFp(this.configuration).listUsageRecordReports(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * It is recommended to provide the ID in the request body CreateUsageRecordGroupParams, so the report can be deduplicated. All duplicate report will return error code 409.
     * @summary report usageRecordGroup
     * @param {MeteringApiReportUsageRecordGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    public reportUsageRecordGroup(requestParameters: MeteringApiReportUsageRecordGroupRequest, options?: AxiosRequestConfig) {
        return MeteringApiFp(this.configuration).reportUsageRecordGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the usage metering config info of the given organization.
     * @summary update usage metering config info
     * @param {MeteringApiUpdateUsageConfigInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    public updateUsageConfigInfo(requestParameters: MeteringApiUpdateUsageConfigInfoRequest, options?: AxiosRequestConfig) {
        return MeteringApiFp(this.configuration).updateUsageConfigInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
