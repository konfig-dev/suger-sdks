/* tslint:disable */
/* eslint-disable */
/**
 * Suger API
 * CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@suger.io
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiClientAccessToken } from '../models';
// @ts-ignore
import { GetApiClientAccessTokenParams } from '../models';
// @ts-ignore
import { GithubComSugerioMarketplaceServiceRdsDbLibIdentityApiClient } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
import { ApiApiCustom } from "./api-api-custom";
/**
 * ApiApi - axios parameter creator
 * @export
 */
export const ApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an API client to access Suger API. Please note that only one API client is permitted per organization at this moment.
         * @summary create api client
         * @param {string} orgId Organization ID
         * @param {'BEARER_TOKEN' | 'API_KEY'} [type] API client type, the default is BEARER_TOKEN if not provided
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (orgId: string, type?: 'BEARER_TOKEN' | 'API_KEY', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('create', 'orgId', orgId)
            const localVarPath = `/org/{orgId}/apiClient`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the API client by ID.
         * @summary get api client
         * @param {string} orgId Organization ID
         * @param {string} apiClientId API client ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (orgId: string, apiClientId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('get', 'orgId', orgId)
            // verify required parameter 'apiClientId' is not null or undefined
            assertParamExists('get', 'apiClientId', apiClientId)
            const localVarPath = `/org/{orgId}/apiClient/{apiClientId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"apiClientId"}}`, encodeURIComponent(String(apiClientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the Bearer Access Token by giving the Suger API Client ID & Client Secret.
         * @summary get api access token
         * @param {GetApiClientAccessTokenParams} getApiClientAccessTokenParams Suger API Client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessToken: async (getApiClientAccessTokenParams: GetApiClientAccessTokenParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getApiClientAccessTokenParams' is not null or undefined
            assertParamExists('getAccessToken', 'getApiClientAccessTokenParams', getApiClientAccessTokenParams)
            const localVarPath = `/public/apiClient/accessToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: getApiClientAccessTokenParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(getApiClientAccessTokenParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all API clients in the given organization.
         * @summary list api clients
         * @param {string} orgId Organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (orgId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('list', 'orgId', orgId)
            const localVarPath = `/org/{orgId}/apiClient`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiApi - functional programming interface
 * @export
 */
export const ApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiApiAxiosParamCreator(configuration)
    return {
        /**
         * Create an API client to access Suger API. Please note that only one API client is permitted per organization at this moment.
         * @summary create api client
         * @param {ApiApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(requestParameters: ApiApiCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubComSugerioMarketplaceServiceRdsDbLibIdentityApiClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(requestParameters.orgId, requestParameters.type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the API client by ID.
         * @summary get api client
         * @param {ApiApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: ApiApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubComSugerioMarketplaceServiceRdsDbLibIdentityApiClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.orgId, requestParameters.apiClientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the Bearer Access Token by giving the Suger API Client ID & Client Secret.
         * @summary get api access token
         * @param {ApiApiGetAccessTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccessToken(requestParameters: ApiApiGetAccessTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiClientAccessToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccessToken(requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all API clients in the given organization.
         * @summary list api clients
         * @param {ApiApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: ApiApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GithubComSugerioMarketplaceServiceRdsDbLibIdentityApiClient>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.orgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApiApi - factory interface
 * @export
 */
export const ApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiApiFp(configuration)
    return {
        /**
         * Create an API client to access Suger API. Please note that only one API client is permitted per organization at this moment.
         * @summary create api client
         * @param {ApiApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: ApiApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<GithubComSugerioMarketplaceServiceRdsDbLibIdentityApiClient> {
            return localVarFp.create(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the API client by ID.
         * @summary get api client
         * @param {ApiApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: ApiApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<GithubComSugerioMarketplaceServiceRdsDbLibIdentityApiClient> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the Bearer Access Token by giving the Suger API Client ID & Client Secret.
         * @summary get api access token
         * @param {ApiApiGetAccessTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessToken(requestParameters: ApiApiGetAccessTokenRequest, options?: AxiosRequestConfig): AxiosPromise<ApiClientAccessToken> {
            return localVarFp.getAccessToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all API clients in the given organization.
         * @summary list api clients
         * @param {ApiApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: ApiApiListRequest, options?: AxiosRequestConfig): AxiosPromise<Array<GithubComSugerioMarketplaceServiceRdsDbLibIdentityApiClient>> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create operation in ApiApi.
 * @export
 * @interface ApiApiCreateRequest
 */
export type ApiApiCreateRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof ApiApiCreate
    */
    readonly orgId: string
    
    /**
    * API client type, the default is BEARER_TOKEN if not provided
    * @type {'BEARER_TOKEN' | 'API_KEY'}
    * @memberof ApiApiCreate
    */
    readonly type?: 'BEARER_TOKEN' | 'API_KEY'
    
}

/**
 * Request parameters for get operation in ApiApi.
 * @export
 * @interface ApiApiGetRequest
 */
export type ApiApiGetRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof ApiApiGet
    */
    readonly orgId: string
    
    /**
    * API client ID
    * @type {string}
    * @memberof ApiApiGet
    */
    readonly apiClientId: string
    
}

/**
 * Request parameters for getAccessToken operation in ApiApi.
 * @export
 * @interface ApiApiGetAccessTokenRequest
 */
export type ApiApiGetAccessTokenRequest = {
    
} & GetApiClientAccessTokenParams

/**
 * Request parameters for list operation in ApiApi.
 * @export
 * @interface ApiApiListRequest
 */
export type ApiApiListRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof ApiApiList
    */
    readonly orgId: string
    
}

/**
 * ApiApi - object-oriented interface
 * @export
 * @class ApiApi
 * @extends {BaseAPI}
 */
export class ApiApi extends ApiApiCustom {
    /**
     * Create an API client to access Suger API. Please note that only one API client is permitted per organization at this moment.
     * @summary create api client
     * @param {ApiApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public create(requestParameters: ApiApiCreateRequest, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).create(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the API client by ID.
     * @summary get api client
     * @param {ApiApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public get(requestParameters: ApiApiGetRequest, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the Bearer Access Token by giving the Suger API Client ID & Client Secret.
     * @summary get api access token
     * @param {ApiApiGetAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public getAccessToken(requestParameters: ApiApiGetAccessTokenRequest, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).getAccessToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all API clients in the given organization.
     * @summary list api clients
     * @param {ApiApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public list(requestParameters: ApiApiListRequest, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
