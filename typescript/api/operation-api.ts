/* tslint:disable */
/* eslint-disable */
/**
 * Suger API
 * CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@suger.io
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Operation } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
import { OperationApiCustom } from "./operation-api-custom";
/**
 * OperationApi - axios parameter creator
 * @export
 */
export const OperationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all long running operations under the given organization, offer, entitlement, crmOpportunity or partnerOpportunity. Only provide one filter on a request.
         * @summary list operations
         * @param {string} orgId Organization ID
         * @param {string} [offerId] filter by offerId
         * @param {string} [entitlementId] filter by entitlementId
         * @param {string} [crmOpportunityId] filter by crmOpportunityId
         * @param {string} [partnerOpportunityId] filter by partnerOpportunityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (orgId: string, offerId?: string, entitlementId?: string, crmOpportunityId?: string, partnerOpportunityId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('list', 'orgId', orgId)
            const localVarPath = `/org/{orgId}/operation`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerTokenAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            if (offerId !== undefined) {
                localVarQueryParameter['offerId'] = offerId;
            }

            if (entitlementId !== undefined) {
                localVarQueryParameter['entitlementId'] = entitlementId;
            }

            if (crmOpportunityId !== undefined) {
                localVarQueryParameter['crmOpportunityId'] = crmOpportunityId;
            }

            if (partnerOpportunityId !== undefined) {
                localVarQueryParameter['partnerOpportunityId'] = partnerOpportunityId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OperationApi - functional programming interface
 * @export
 */
export const OperationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OperationApiAxiosParamCreator(configuration)
    return {
        /**
         * List all long running operations under the given organization, offer, entitlement, crmOpportunity or partnerOpportunity. Only provide one filter on a request.
         * @summary list operations
         * @param {OperationApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: OperationApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Operation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.orgId, requestParameters.offerId, requestParameters.entitlementId, requestParameters.crmOpportunityId, requestParameters.partnerOpportunityId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OperationApi - factory interface
 * @export
 */
export const OperationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OperationApiFp(configuration)
    return {
        /**
         * List all long running operations under the given organization, offer, entitlement, crmOpportunity or partnerOpportunity. Only provide one filter on a request.
         * @summary list operations
         * @param {OperationApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: OperationApiListRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Operation>> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for list operation in OperationApi.
 * @export
 * @interface OperationApiListRequest
 */
export type OperationApiListRequest = {
    
    /**
    * Organization ID
    * @type {string}
    * @memberof OperationApiList
    */
    readonly orgId: string
    
    /**
    * filter by offerId
    * @type {string}
    * @memberof OperationApiList
    */
    readonly offerId?: string
    
    /**
    * filter by entitlementId
    * @type {string}
    * @memberof OperationApiList
    */
    readonly entitlementId?: string
    
    /**
    * filter by crmOpportunityId
    * @type {string}
    * @memberof OperationApiList
    */
    readonly crmOpportunityId?: string
    
    /**
    * filter by partnerOpportunityId
    * @type {string}
    * @memberof OperationApiList
    */
    readonly partnerOpportunityId?: string
    
}

/**
 * OperationApi - object-oriented interface
 * @export
 * @class OperationApi
 * @extends {BaseAPI}
 */
export class OperationApi extends OperationApiCustom {
    /**
     * List all long running operations under the given organization, offer, entitlement, crmOpportunity or partnerOpportunity. Only provide one filter on a request.
     * @summary list operations
     * @param {OperationApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationApi
     */
    public list(requestParameters: OperationApiListRequest, options?: AxiosRequestConfig) {
        return OperationApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
